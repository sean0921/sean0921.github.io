<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean&#39;s Blog</title>
  
  <subtitle>less is more, old is new.</subtitle>
  <link href="http://sean0921.github.io/atom.xml" rel="self"/>
  
  <link href="http://sean0921.github.io/"/>
  <updated>2021-06-06T16:51:23.676Z</updated>
  <id>http://sean0921.github.io/</id>
  
  <author>
    <name>Sean Ho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 Debian/Ubuntu 等 Linux 發行版下簡易打包軟體 – 以 SAC 為例</title>
    <link href="http://sean0921.github.io/2021/06/06/sac-debian-packaging/"/>
    <id>http://sean0921.github.io/2021/06/06/sac-debian-packaging/</id>
    <published>2021-06-05T16:00:00.000Z</published>
    <updated>2021-06-06T16:51:23.676Z</updated>
    
    <content type="html"><![CDATA[<p>我們常見到的Linux 發行版基本上就是一個「拼裝車」，組合各個不同來源的專案原始碼組合成一個有多用途的「通用作業系統」。我們將以地震學軟體 SAC 為例，說明如何簡單利用「套件打包」的機制，藉由既有軟體打包管理工具，使得發行版內的軟體更能有秩序地被管理。</p><span id="more"></span><h2 id="套件打包的目的"><a href="#套件打包的目的" class="headerlink" title="套件打包的目的"></a>套件打包的目的</h2><p>相對於 Windows、FreeBSD 作業系統都有官方維護的基礎元件(base component)，我們常見到的 Linux 發行版基本上就是一個全然的「拼裝車」，組合各個不同來源的專案原始碼組合成一個有實際用途的「<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F#%E9%80%9A%E7%94%A8%E4%B8%8E%E4%B8%93%E7%94%A8%E3%80%81%E5%B5%8C%E5%85%A5%E5%BC%8F">通用作業系統</a>」。通常發行版的維護者會優先將符合<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E5%8F%8A%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6">自由及開放原始碼授權</a>的專案納入其關鍵元件，各個發行版看似五花八門，但終究離不開這個本質。少數發行版(如: Ubuntu Linux)在法律資源充足下會在安裝期間提供授權不相容(如: Nvidia 驅動、OpenZFS 核心模組)的元件以增進使用者體驗。但在大部分情況下，只要是授權有疑慮或明定不開放散佈原始碼的軟體，在發行版整合上就是一個巨大的阻礙，因為這意味者我們無法透過社群合作的機制，讓更熟悉軟體開發部署工程的人檢視我們平常使用的程式是否是易於使用、沒有潛在問題的。</p><p>而我們在 Unix-like (Linux、FreeBSD、Solaris、更早期的 SunOS..等) 環境下，最早期藉由原始碼安裝軟體方式，就是進入原始碼資料夾。執行 <code>make</code> 將軟體編譯完成後，再使用 root 權限 <code>make install</code>，將軟體安裝到預設的路徑 ( <code>/usr/local</code> ) 下。但現在我們已經極度不建議安裝用這樣的方式在預設路徑( <code>/usr/local</code> )，因為容易跟其他也手動安裝在同位置的套件混淆，使得嘗試解除安裝的過程中容易誤刪手動 <code>make install</code> 安裝其他套件的檔案，讓升級或解除安裝套件更加複雜。更別說在「不重複安裝」的前提下，解決 A 函式庫一更新，以它為基礎的 B 專案就得重新編譯才能找到 A 以執行的常見問題了。</p><p>因此我們開始使用了「套件打包」的機制，藉由單一專案的軟體打包管理程式(dpkg, rpm)，統一發行版內軟體管理的秩序。</p><h2 id="使用情境-–-為什麼要「打包」SAC"><a href="#使用情境-–-為什麼要「打包」SAC" class="headerlink" title="使用情境 – 為什麼要「打包」SAC?"></a>使用情境 – 為什麼要「打包」SAC?</h2><p>SAC 全名是 Seismic Analysis Code，是個歷史悠久的地震學資料處理軟體，由美國的 IRIS (地震學研究機構聯合會) 團隊開發，主要使用 C 語言開發，需在相容 Unix-like (如 Linux, FreeBSD, Cygwin…等) 的 X 視窗系統下才能正常使用，並只提供相關原始碼、執行檔給非特殊國家之地震學相關人員。若需取得相關程式需至官方網站<a href="https://ds.iris.edu/ds/nodes/dmc/forms/sac/">填寫申請表單</a>，由該單位人員審核後才可藉由 email 附件取得檔案。</p><p>傳統而言，在同一作業系統環境下安裝 SAC 有兩種途徑，第一種是直接把 IRIS 提供的執行檔手動放到指定位置 ( Linux 下指定 <code>/usr/local</code> ) 後執行，第二種是在作業系統下自行使用 gcc 等編譯器建置後安裝到自行指定的位置 (若未指定則仍安裝到 <code>/usr/local</code> )</p><p>第一種方法的方便之處在於說，不需要瞭解太多 Linux / Unix 的基礎知識與相關操作就可以藉由非常基本的指令 (cp, sudo…等) 完成安裝</p><p>缺點在於只能安裝在 <a href="https://zh.wikipedia.org/zh-tw/X86">x86</a>/<a href="https://zh.wikipedia.org/zh-tw/X86-64">x86_64</a> 平臺下的 CPU 才能順利執行的 Linux 執行檔，也就是說若你今天想在同樣安裝 Linux 的小型開發板 (如：樹梅派、Apple Silicon M1 上執行的虛擬機器)或是在官方沒考慮的 Unix-like 環境(Cygwin, FreeBSD, Termux)下執行是做不到的 (樹梅派或許可以在上面開 QEMU 模擬，但速度可預想是非常非常慢的)</p><p>另外第一種方法也無法自行客製化相關功能，這限制的問題在於說用此方法安裝的 SAC 程式只能在極度有限的操作體驗下進行，而使得剛熟悉 bash 等指令介面的使用者進入 SAC 的指令介面會發現 TAB 自動補完、上下、結束時保留指令歷史、Ctrl+R 搜尋歷史等在 bash 有的功能這邊都沒有或限制更多。但如果客製化編譯就可以藉由增加相關選項就可以改善。</p><p>因此我們知道如果藉由第二種方法有可修改安裝路徑、自行增減相關功能、移植更方便等優勢，但此方法對於沒有接觸過系統管理、程式開發的使用者挑戰並不小，且若想要提供給多個各自符合資格的人員，安裝一樣客製化設定同時符合易於安裝、升級、解除安裝原則的 SAC 程式也勢必會花費很多心力。此時發行版下的套件管理工具就是我們很重要的夥伴了! 在這邊我們將用 Debian/Ubuntu 下的 <code>apt</code> (<code>dpkg</code>) 工具來協助我們更輕易地部署「我們的 SAC」</p><h2 id="SAC-Debian-Ubuntu-Packager-介紹"><a href="#SAC-Debian-Ubuntu-Packager-介紹" class="headerlink" title="SAC Debian/Ubuntu Packager 介紹"></a>SAC Debian/Ubuntu Packager 介紹</h2><p><img src="https://github.com/sean0921/sean0921.github.io/raw/3ef1e32d61fc62c546c6ba31ef526ccc050cc7b2/images/demo.gif"></p><p>這個工具使用最基本的 Shell Script 腳本，搭配 <code>dpkg</code> 程式，將編譯後的 SAC 程式放置在特定資料夾後，再加入軟體資訊後打包壓縮成單一安裝檔 (<code>&lt;pkg_name&gt;.deb</code>)，最後再由使用者從 <code>apt</code> 程式安裝該套件，納入發行版套件管理系統的記錄中。</p><p>由以上討論我們可以歸納這個方法的好處：</p><ol><li>使得 SAC 更易於安裝、解除安裝、升級</li><li>SAC 底層用到的函式庫一旦有重大升級，發行版套件管理程式（<code>apt</code>）會跳出相關警告，讓你記得要重新安裝程式。</li><li>減少繁瑣的環境變數設定</li></ol><p>使用這個工具安裝 SAC 之前，符合相關資格的使用者仍需自行至 IRIS 網站申請下載原始碼，以遵守授權相關規範。詳細安裝方式請參考 <a href="https://github.com/sean0921/sac_debian_packager">GitHub</a> 上的 README 頁面。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>套件打包適合用在一定數量的人會安裝的軟體上，以減少繁瑣安裝過程中可能會出錯的機率，以增進效率並兼顧使用體驗。也是讓 Linux 在有限硬碟空間下提供完整功能的關鍵。若有心在未來的專案上利用 Linux 環境作為開發測試平臺，這仍然是不可或缺的知識。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我們常見到的Linux 發行版基本上就是一個「拼裝車」，組合各個不同來源的專案原始碼組合成一個有多用途的「通用作業系統」。我們將以地震學軟體 SAC 為例，說明如何簡單利用「套件打包」的機制，藉由既有軟體打包管理工具，使得發行版內的軟體更能有秩序地被管理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://sean0921.github.io/tags/linux/"/>
    
    <category term="packaging" scheme="http://sean0921.github.io/tags/packaging/"/>
    
    <category term="sysadmin" scheme="http://sean0921.github.io/tags/sysadmin/"/>
    
    <category term="seismology" scheme="http://sean0921.github.io/tags/seismology/"/>
    
  </entry>
  
  <entry>
    <title>成為 Git 獨行玩家的第一步 － 自架 cgit 網頁程式碼瀏覽服務</title>
    <link href="http://sean0921.github.io/2021/03/27/be-a-git-single-player-cgit-tutorial/"/>
    <id>http://sean0921.github.io/2021/03/27/be-a-git-single-player-cgit-tutorial/</id>
    <published>2021-03-26T17:47:27.000Z</published>
    <updated>2021-03-28T07:36:29.858Z</updated>
    
    <content type="html"><![CDATA[<p>不想被單一特定程式碼平臺綁住你個人開發的程式碼又想將你的心血整合起來供其他人參考嗎? 又或是擔心在 GitHub 上一堆為了學術研究用途的專案哪一天被和諧掉嗎? 如果沒有多人合作 CI/CD 需求直接從網頁登入存取的需求 <code>cgit</code> 這個由 C 語言開發的網頁 cgi 服務, 簡潔又快速的功能或許可以輕易滿足你的需求喔</p><span id="more"></span><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="1-環境配置"><a href="#1-環境配置" class="headerlink" title="1. 環境配置"></a>1. 環境配置</h3><h4 id="運行環境"><a href="#運行環境" class="headerlink" title="運行環境"></a>運行環境</h4><p>任何 Unix-like 環境 ( Linux/FreeBSD/Cygwin/WSL ) 皆可, 本文章以 <em>Debian GNU/Linux Buster(10)</em> 為例進行解說, 相關過程指令也相容 <em>Ubuntu Linux</em>, <em>Debian GNU/Linux Bullseye(11)</em></p><h4 id="安裝相關套件"><a href="#安裝相關套件" class="headerlink" title="安裝相關套件"></a>安裝相關套件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install cgit fcgiwrap nginx git python3-markdown</span><br></pre></td></tr></table></figure><h3 id="2-調校-nginx-cgit"><a href="#2-調校-nginx-cgit" class="headerlink" title="2. 調校 nginx, cgit"></a>2. 調校 nginx, cgit</h3><ul><li>刪除 <code>/etc/nginx/sites-&#123;enabled,available&#125;/default</code>, 用以下設定檔取代</li><li><code>/etc/nginx/conf.d/cgit.conf</code>:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line"></span><br><span class="line">        # Add index.php to the list if you are using PHP</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                #try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">                try_files $uri @cgit;    ## 這邊要使用 cgit 的 CGI 程式來解譯路徑</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location &#x2F;cgit-css&#x2F; &#123;</span><br><span class="line">                rewrite ^&#x2F;cgit-css(&#x2F;.*)$ $1 break;</span><br><span class="line">                root &#x2F;usr&#x2F;share&#x2F;cgit;    ## cgit 的 CSS 排版格式與相關預設圖片需要它</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location @cgit &#123;</span><br><span class="line">                include             fastcgi_params;</span><br><span class="line"></span><br><span class="line">                # Path to the CGI script that comes with cgit</span><br><span class="line">                fastcgi_param       SCRIPT_FILENAME &#x2F;usr&#x2F;lib&#x2F;cgit&#x2F;cgit.cgi;</span><br><span class="line"></span><br><span class="line">                fastcgi_param       PATH_INFO       $uri;</span><br><span class="line">                fastcgi_param       QUERY_STRING    $args;</span><br><span class="line">                fastcgi_param       HTTP_HOST       $server_name;</span><br><span class="line"></span><br><span class="line">                # Path to the socket file that is created&#x2F;used by fcgiwrap</span><br><span class="line">                fastcgi_pass        unix:&#x2F;run&#x2F;fcgiwrap.socket;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>/etc/cgitrc</code>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># cgit config</span><br><span class="line"># see cgitrc(5) for details</span><br><span class="line"></span><br><span class="line">## 這邊要搭配 nginx 設定的路徑來設定相關資源位置</span><br><span class="line">css&#x3D;&#x2F;cgit-css&#x2F;cgit.css</span><br><span class="line">logo&#x3D;&#x2F;cgit-css&#x2F;cgit.png</span><br><span class="line">favicon&#x3D;&#x2F;cgit-css&#x2F;favicon.ico</span><br><span class="line"></span><br><span class="line"># if you don&#39;t want that webcrawler (like google) index your site</span><br><span class="line">#robots&#x3D;noindex, nofollow</span><br><span class="line"></span><br><span class="line">root-title&#x3D;Andas valiendo verga</span><br><span class="line">root-desc&#x3D;r2&#39;s Git Repositories</span><br><span class="line"># if cgit messes up links, use a virtual-root. For example has cgit.example.org&#x2F; this value:</span><br><span class="line">virtual-root&#x3D;&#x2F;</span><br><span class="line">#virtual-root&#x3D;&#x2F;cgit.cgi&#x2F;</span><br><span class="line">enable-http-clone&#x3D;1</span><br><span class="line">cache-scanrc-ttl&#x3D;1</span><br><span class="line">#remove-suffix&#x3D;1</span><br><span class="line">#branch-sort&#x3D;age</span><br><span class="line">local-time&#x3D;1</span><br><span class="line">enable-blame&#x3D;1</span><br><span class="line">enable-commit-graph&#x3D;1</span><br><span class="line">enable-index-owner&#x3D;1</span><br><span class="line">enable-log-filecount&#x3D;1</span><br><span class="line">enable-log-linecount&#x3D;1</span><br><span class="line">max-stats&#x3D;year</span><br><span class="line">max-commit-count&#x3D;250</span><br><span class="line">max-repo-count&#x3D;250</span><br><span class="line">snapshots&#x3D;tar.gz tar.zst</span><br><span class="line"></span><br><span class="line"># Specify some default clone urls using macro expansion</span><br><span class="line">#clone-url&#x3D;http:&#x2F;&#x2F;myip&#x2F;$CGIT_REPO_URL</span><br><span class="line"></span><br><span class="line"># Highlight source code with python pygments-based highligher</span><br><span class="line">source-filter&#x3D;&#x2F;usr&#x2F;lib&#x2F;cgit&#x2F;filters&#x2F;syntax-highlighting.py</span><br><span class="line"></span><br><span class="line"># Format markdown, restructuredtext, manpages, text files, and html files</span><br><span class="line"># through the right converters</span><br><span class="line">about-filter&#x3D;&#x2F;usr&#x2F;lib&#x2F;cgit&#x2F;filters&#x2F;about-formatting.sh</span><br><span class="line"></span><br><span class="line">enable-index-links&#x3D;1</span><br><span class="line">root-readme&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;readme.md</span><br><span class="line">#root-readme&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;readme.html</span><br><span class="line"></span><br><span class="line">## 這邊可以幫你設定 cgit 掃描的 repo 所在資料夾</span><br><span class="line">scan-path&#x3D;&#x2F;srv&#x2F;gitrepos&#x2F;git&#x2F;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line">## List of common mimetypes</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">mimetype.gif&#x3D;image&#x2F;gif</span><br><span class="line">mimetype.html&#x3D;text&#x2F;html</span><br><span class="line">mimetype.jpg&#x3D;image&#x2F;jpeg</span><br><span class="line">mimetype.jpeg&#x3D;image&#x2F;jpeg</span><br><span class="line">mimetype.pdf&#x3D;application&#x2F;pdf</span><br><span class="line">mimetype.png&#x3D;image&#x2F;png</span><br><span class="line">mimetype.svg&#x3D;image&#x2F;svg+xml</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line">## Search for these files in the root of the default branch of repositories</span><br><span class="line">## for coming up with the about page:</span><br><span class="line">## 這邊如果沒安裝 python3-markdown 等套件的話README 仍然無法顯示 markdown 格式的喔</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">readme&#x3D;:README.md</span><br><span class="line">readme&#x3D;:readme.md</span><br><span class="line">readme&#x3D;:README.mkd</span><br><span class="line">readme&#x3D;:readme.mkd</span><br><span class="line">readme&#x3D;:README.rst</span><br><span class="line">readme&#x3D;:readme.rst</span><br><span class="line">readme&#x3D;:README.html</span><br><span class="line">readme&#x3D;:readme.html</span><br><span class="line">readme&#x3D;:README.htm</span><br><span class="line">readme&#x3D;:readme.htm</span><br><span class="line">readme&#x3D;:README.txt</span><br><span class="line">readme&#x3D;:readme.txt</span><br><span class="line">readme&#x3D;:README</span><br><span class="line">readme&#x3D;:readme</span><br><span class="line">readme&#x3D;:INSTALL.md</span><br><span class="line">readme&#x3D;:install.md</span><br><span class="line">readme&#x3D;:INSTALL.mkd</span><br><span class="line">readme&#x3D;:install.mkd</span><br><span class="line">readme&#x3D;:INSTALL.rst</span><br><span class="line">readme&#x3D;:install.rst</span><br><span class="line">readme&#x3D;:INSTALL.html</span><br><span class="line">readme&#x3D;:install.html</span><br><span class="line">readme&#x3D;:INSTALL.htm</span><br><span class="line">readme&#x3D;:install.htm</span><br><span class="line">readme&#x3D;:INSTALL.txt</span><br><span class="line">readme&#x3D;:install.txt</span><br><span class="line">readme&#x3D;:INSTALL</span><br><span class="line">readme&#x3D;:install</span><br><span class="line"></span><br><span class="line">###Catogory</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;</span><br><span class="line">## 這邊可以另外幫自己分類 git 專案</span><br><span class="line">#</span><br><span class="line">#section&#x3D;a: BBS Projects</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;category&#x2F;bbs</span><br><span class="line">#section&#x3D;b: My Distro-Hacking Records</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;category&#x2F;distro</span><br><span class="line">#section&#x3D;c: My Personal Toys</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;category&#x2F;mytoy</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-啟用服務與啟動服務"><a href="#3-啟用服務與啟動服務" class="headerlink" title="3. 啟用服務與啟動服務"></a>3. 啟用服務與啟動服務</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t <span class="comment">## 檢查 nginx config 檔格式是否正確</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> --now fcgiwrap</span><br></pre></td></tr></table></figure><h3 id="4-1-抓取你想要鏡像的-git-repository"><a href="#4-1-抓取你想要鏡像的-git-repository" class="headerlink" title="4-1. 抓取你想要鏡像的 git repository"></a>4-1. 抓取你想要鏡像的 git repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --mirror https://github.com/&lt;github_user_name&gt;/&lt;github_repo_name&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-透過-git-ssh-server-設定你想要託管的-git-repository-optional"><a href="#4-2-透過-git-ssh-server-設定你想要託管的-git-repository-optional" class="headerlink" title="4-2. 透過 git+ssh server 設定你想要託管的 git repository (optional)"></a>4-2. 透過 git+ssh server 設定你想要託管的 git repository (optional)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/git-shell git</span><br><span class="line">sudo -su git cat &lt;place_of_your_ssh_public_key&gt; &gt;&gt; &lt;git_account_home&gt;/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="5-噹噹-開始使用你的服務"><a href="#5-噹噹-開始使用你的服務" class="headerlink" title="5. 噹噹! 開始使用你的服務"></a>5. 噹噹! 開始使用你的服務</h3><p>輸入網址, 享用你的自架 git 服務: <code>http://&lt;your_cgit_ip_or_domain&gt;</code></p><p>若服務對外公開的話, 建議還是設定一下 TLS 安全連線比較保險一些</p><p>詳細 TLS 憑證設定與 Let’s Encrypt 憑證申請, 可以參考以下資源進行調整:</p><ul><li><a href="https://wiki.gslin.org/wiki/Let%27s_Encrypt">https://wiki.gslin.org/wiki/Let%27s_Encrypt</a></li><li><a href="https://ssl-config.mozilla.org/">https://ssl-config.mozilla.org/</a></li></ul><hr><p>我的 git repository: <a href="https://cgit.clam.ml/">https://cgit.clam.ml</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不想被單一特定程式碼平臺綁住你個人開發的程式碼又想將你的心血整合起來供其他人參考嗎? 又或是擔心在 GitHub 上一堆為了學術研究用途的專案哪一天被和諧掉嗎? 如果沒有多人合作 CI/CD 需求直接從網頁登入存取的需求 &lt;code&gt;cgit&lt;/code&gt; 這個由 C 語言開發的網頁 cgi 服務, 簡潔又快速的功能或許可以輕易滿足你的需求喔&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="http://sean0921.github.io/tags/git/"/>
    
    <category term="cgit" scheme="http://sean0921.github.io/tags/cgit/"/>
    
    <category term="nginx" scheme="http://sean0921.github.io/tags/nginx/"/>
    
    <category term="fastcgi" scheme="http://sean0921.github.io/tags/fastcgi/"/>
    
    <category term="opensource" scheme="http://sean0921.github.io/tags/opensource/"/>
    
  </entry>
  
  <entry>
    <title>從唯美浪漫到勵志成長 - 喬瑟與虎與魚群</title>
    <link href="http://sean0921.github.io/2021/01/22/josee-tiger-fish/"/>
    <id>http://sean0921.github.io/2021/01/22/josee-tiger-fish/</id>
    <published>2021-01-22T09:13:42.000Z</published>
    <updated>2021-03-26T17:45:05.094Z</updated>
    
    <content type="html"><![CDATA[<p>喬瑟與虎與魚群（ジョゼと虎と魚たち）是日本作家田邊聖子首次於 1984 年開始連載的短篇小說作品，於 2003 年、2020 年分別翻拍成日版與韓版真人電影，並於 2020/12/25 上映動畫電影 (臺灣於 2021/1/20 上映)</p><p>原作篇幅較短，一些故事細節交代較為曖昧而著重於描繪角色的心境，因此改編作品的詮釋風格與走向也大相逕庭。這篇會討論到的主要是原作小說與動畫電影的相關<em>劇情內容</em>與雜感，當然真人電影版詮釋方式可能有它的美感與哲理，但目前沒什麼動力去欣賞。</p><p>原作小說與動畫電影版比較起來已然成為兩個故事，然而各自都是透過表現出自己獨有風格去觸動人心的作品</p><span id="more"></span><p><img src="https://i.imgur.com/fiEnXn9.png" alt="蒼のワルツ MV 封面"></p><p>先談談小說版</p><p>在看完 Eve 的<a href="https://www.youtube.com/watch?v=pyDCubgU57g">蒼のワルツ</a> MV 之後，開始對原作感到好奇，一時衝動把電子書買下，就不小心把原著看完了（一開始是在 kobo 買的，後來發現 bookwalker 有特價但已經來不及了www）</p><p>一開始打開書發現原來是短篇小說集本來有點小失望，但想想故事太長我也沒毅力看完，加上每篇故事都在極短的篇幅，曖昧的劇情走向下，留下立體且使人深有共感的角色心境描寫，也使得自己的心境彷彿也能透過這幾篇故事主角的自述中感受到不同社會角色眼前所見到、心裏所感受到的感情世界。對自己來說算是滿新鮮的體驗。</p><p>其他值得注意的是除了「喬瑟」篇是在描寫純愛故事外，同本書的其他故事大多從已出社會能獨立自主維持生計的女性為第一人稱出來去觀察他們眼中看到的各種男人，很多故事幾乎要衝撞到傳統道德價值觀的邊緣，但多在最後留下曖昧的結尾讓讀者自行想像，而將敘述重點留在透過描繪周遭事物的變化表現出主角心境與其轉變。</p><p>而「喬瑟」篇故事架構相對其他短篇完整一些，喬瑟(Josee) 指的是女主角山村久美子在佛蘭西絲·莎崗(Françoise Sagan)的書中常看到的主角名，<br>後來拿這個名字作為自稱。故事一開始直接從「蜜月旅行」開始以倒敘法描述喬瑟與恆夫相遇的故事，相較於動畫版的「完人人設」與聽說 2003 年劇場版的「腳踏多條船人設」，小說則是將恆夫描述成有自己正常休閒、畢業後庸庸碌碌找工作在職場求生存，也談過幾段感情，但從喬瑟身上開始體會到感情真諦的平凡男人。</p><p>小說的部分也從許多細節隱喻到雖然悲情但是真實的社會陰暗面，但主角重新相遇後也用更有張力的方式表達他們對彼此的思戀與愛慕，故事最後的走向也類似紫羅蘭劇場版最後的風格吧，算是一個從此過著平淡卻幸福快樂日子的結局。</p><p><img src="https://cdn.kingstone.com.tw/book/images/product/20186/2018611724930/2018611724930-01.jpg" alt="圖片來源: 金石堂網路書城"></p><p>而動畫版算是幾乎重寫整個故事，女主的家庭背景有消一下毒，男主角的人設也改很多，另外在不少細節、臺詞呼應到小說版對應的情節。</p><p>配樂部分 Evan Call 這次相對於紫羅蘭永恆花園劇場版就顯得比較沒有存在感了，看似這樣卻成功在無形中塑造了一種正向活潑的氣息，來推動劇情，這方面倒是有盡到他們的本分XD</p><p>臺詞方面個人印象最深刻的是「跟想像的不一樣」還有「我們都死了呢」這兩句，前者的不同建議再親自看過各自的版本才能有比較深刻的體會，後者出現的時機則是在原作的蜜月旅行當晚，對應到的動畫劇場版的最後在櫻花樹下突然相遇。這些對應其實就能看出動畫組花了多少心思，讓觀眾們從更容易從生活事物體會的角度，瞭解喬瑟那樣的心境與幸福感。其他更多類似彩蛋的小細節對應也滿有趣的，像是小說版提到的「溜冰鞋」，在動畫版中也用更活潑的方式重現了(包括喬瑟不小心滑下去那段)，當然其他恆夫作為木工生產出來的心血，也很自然地融入日常部分的背景。</p><p>動畫版劇情編排部分不知道是因為篇幅限制還是其它原因，加戲的部分真要糾結還是可以看到不少讓人滿出戲的劇情轉折。然而仍有值得讚許的地方，從認識圖書館員、喬瑟第一次講繪本故事大失敗，鋪陳到最後喬瑟唸自己製作的繪本故事給小孩子聽，進而讓故事內容激勵到在一旁聽的恆夫，這段劇情應該就是全戲的最大亮點，光是那段到最後的浪漫 Ending 就可以忘掉動畫版所有的大小瑕疵，也成功表現出這個改編作品想傳達出的核心精神。</p><p>其他值得去關注的，還有喬瑟在進去恆夫打工的水族店沒多久就想離開的那橋段。有人認為她是在吃舞的醋，但從畫面刻意帶到其他人各自聊天聊得很愉快的場景來看，我認為解讀成喬瑟一時間沒辦法適應那樣過度充滿活力的環境，覺得能量被耗盡想逃離，是更為合理的。</p><p><img src="https://pbs.twimg.com/media/Ep6iUqDVgAEY_zD.jpg" alt="動畫劇場版原聲帶封面"></p><p>有別於以往真人劇場版(聽說)更注重於探討愛情本質與人心轉折，這次動畫劇場版以小說版就已經很優秀的人設與劇情架構為基礎，結合近年大家更能接受的故事元素，在愛情故事的基礎下，增加朋友之間的相互勉勵、少年成長與生涯規劃，還加了男主有懼高症的可愛人設(?)。在推動劇情重要地位的圖書館員、給予恆夫氧氣的摯友…等重要配角的幫忙下，讓他們的感情從兩人世界的取暖，拓展到相互扶持，且也能夠被週遭美麗世界所祝福的浪漫故事。這讓已經看完原作心裡就掀起波瀾的自己看完動畫後餘韻更為深刻吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;喬瑟與虎與魚群（ジョゼと虎と魚たち）是日本作家田邊聖子首次於 1984 年開始連載的短篇小說作品，於 2003 年、2020 年分別翻拍成日版與韓版真人電影，並於 2020/12/25 上映動畫電影 (臺灣於 2021/1/20 上映)&lt;/p&gt;
&lt;p&gt;原作篇幅較短，一些故事細節交代較為曖昧而著重於描繪角色的心境，因此改編作品的詮釋風格與走向也大相逕庭。這篇會討論到的主要是原作小說與動畫電影的相關&lt;em&gt;劇情內容&lt;/em&gt;與雜感，當然真人電影版詮釋方式可能有它的美感與哲理，但目前沒什麼動力去欣賞。&lt;/p&gt;
&lt;p&gt;原作小說與動畫電影版比較起來已然成為兩個故事，然而各自都是透過表現出自己獨有風格去觸動人心的作品&lt;/p&gt;</summary>
    
    
    
    
    <category term="anime" scheme="http://sean0921.github.io/tags/anime/"/>
    
    <category term="novel" scheme="http://sean0921.github.io/tags/novel/"/>
    
    <category term="romance" scheme="http://sean0921.github.io/tags/romance/"/>
    
    <category term="josee" scheme="http://sean0921.github.io/tags/josee/"/>
    
  </entry>
  
  <entry>
    <title>靈魂急轉彎(Soul)觀後簡短感</title>
    <link href="http://sean0921.github.io/2021/01/03/2020-pixel-soul-movie/"/>
    <id>http://sean0921.github.io/2021/01/03/2020-pixel-soul-movie/</id>
    <published>2021-01-02T17:41:04.000Z</published>
    <updated>2021-03-26T17:45:05.094Z</updated>
    
    <content type="html"><![CDATA[<p>先講結論，22 我婆 (如果如字幕的她沒打錯的話????<br><img src="https://i.imgur.com/qpD4kAQ.png"></p><p>以下可能劇透</p><span id="more"></span><p>這部作品有幾個對我頻率的地方</p><p>首先是以藍調音樂為傳遞主角思維與人生理想的媒介</p><p>在這樣題材的表現上</p><p>Pixel 在基於思慮多元種族議題(BLM?)方面上拿到的 Political Correct 的分數以外</p><p>也兼顧了藝術性的傳達，讓<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E8%AA%BF">藍調</a>曲風與<a href="https://zh.wikipedia.org/wiki/%E7%88%B5%E5%A3%AB%E4%B9%90">爵士樂</a>的優美與哀愁透過更為普及的媒介傳達出來</p><p>這是讓以前半夜在收音機隨興聽相關節目的我相當感動的地方</p><p>也可以巧妙地搭配靈魂出竅的橋段讓劇情更為順暢</p><p>再來是 22 號對於生活之美的體悟</p><p>從 22 號犀利卻中肯的言辭，不難看出他是跟隨過許多名人並理解過其思想仍玩世不恭的人</p><p>吸收到許多知識與哲學涵養的靈魂但怎樣都拿不到投胎轉世的通行證</p><p>但進了主角身體</p><p>在那些主角以為平凡無奇，甚至單調到令人絕望的日常</p><p>卻因為 22 這個亂源的自作主張，擦出了不一樣的「火花」，</p><p>22 對每一件讓他驚喜的小物收藏，披薩、桃花心木種子…等，也成為了啟發主角與我們的契機</p><blockquote><p>找回美的感覺其實很簡單，去觸摸一片葉子，去聞一下在很熱很熱的夏天、下完午後暴雨的氣味，那是都我們有記憶的感覺，那都會引發我們的感觸和感動。</p></blockquote><p>就如同蔣勳提過的</p><p>22 也用了這樣的概念不經意地找回主角遺忘生活各個角落的感動，然而當時主角並沒有察覺</p><p>甚至責怪 22 只是利用別人的身體作為自己拿到通行證的捷徑，因此 22 的陰暗面就再也承受不住了</p><p>其實最讓人揪心也是最讓人「享受」的部分也是 22 暴衝，以及以為主角沒救但是至少能夠不抱遺憾離開的那個橋段吧</p><p>但除了劇情希望更能為大眾所接受的考量，或許也是不希望整部作品想要傳達的概念失焦吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先講結論，22 我婆 (如果如字幕的她沒打錯的話????&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/qpD4kAQ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下可能劇透&lt;/p&gt;</summary>
    
    
    
    
    <category term="anime" scheme="http://sean0921.github.io/tags/anime/"/>
    
    <category term="disney" scheme="http://sean0921.github.io/tags/disney/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 再見，但，CentOS Stream 真有那麼不堪嗎?</title>
    <link href="http://sean0921.github.io/2020/12/10/centos-stream-replace-centos-8/"/>
    <id>http://sean0921.github.io/2020/12/10/centos-stream-replace-centos-8/</id>
    <published>2020-12-09T17:04:27.000Z</published>
    <updated>2021-03-26T17:45:05.094Z</updated>
    
    <content type="html"><![CDATA[<p>自從 12/8 CentOS blog 和 Mailing list 相繼宣佈將要轉移開發重心到 CentOS Stream 上，並計劃要讓 CentOS 8.x (有版號的 release) 提前退休後</p><p><a href="https://blog.centos.org/2020/12/future-is-centos-stream/">https://blog.centos.org/2020/12/future-is-centos-stream/</a><br><a href="https://lists.centos.org/pipermail/centos-announce/2020-December/048208.html">https://lists.centos.org/pipermail/centos-announce/2020-December/048208.html</a></p><p>甚至出現<a href="https://www.cyberciti.biz/linux-news/centos-linux-8-will-end-in-2021-and-shifts-focus-to-centos-stream/">報導</a>指出：CentOS Stream 不會比 RHEL 早拿到安全更新，又要幫 RHEL 先測試新套件，同時因為 CentOS Stream 的環境比較新，你在 CentOS Stream 上面構建的套件還無法移植回 RHEL 上</p><p>但我認為這個論點有一些不充分甚至是誤導的地方。</p><span id="more"></span><h2 id="基本觀念"><a href="#基本觀念" class="headerlink" title="基本觀念"></a>基本觀念</h2><p>在講下去之前，先記住兩件事實：</p><ol><li>RHEL/CentOS/CentOS Stream 在同一個大版號 (major release, 6/7/8) 內的 ABI/API 是保持穩定不變的 <a href="https://access.redhat.com/articles/rhel8-abi-compatibility#Scope">^1</a></li><li>CentOS 的安全性更新本來就是晚於 RHEL 的，且相較其他主流發行版晚很多</li></ol><h2 id="討論"><a href="#討論" class="headerlink" title="討論"></a>討論</h2><blockquote><ul><li>How will CVEs be handled in CentOS Stream?<br>…<br>In other words, CentOS Streams users will test RHEL ahead of everyone and<br>report bugs, but they won’ t get security updates till resolved in RHEL. Very<br>tricky situation.</li></ul></blockquote><p>這邊沒提到的是，傳統的 CentOS 本來就是這樣:</p><ul><li><a href="https://lists.centos.org/pipermail/centos-announce/2020-November/035873.html">https://lists.centos.org/pipermail/centos-announce/2020-November/035873.html</a></li><li><a href="https://lists.centos.org/pipermail/centos-announce/2020-November/035814.html">https://lists.centos.org/pipermail/centos-announce/2020-November/035814.html</a></li></ul><p>以這幾篇為例，傳統的 CentOS 本來就要等上一個禮拜（年代久遠的 release 甚至要到一個月）以上的時間才會接到來自 RHEL 的 Security patch，改成 CentOS Stream 之後不但不會比較慢，也有機會在更短的時間內接到 patch</p><blockquote><ul><li>Does this mean that CentOS Stream is the RHEL BETA test platform now?<br>…<br>There is no option if you use CentOS for CI<br>because you couldn’t use RHEL developer licenses.<br>Also, note that CentOS Stream will have different ABI/API at times,<br>so you can no longer test or build EPEL packages locally.</li></ul></blockquote><p>但 FAQ 其他地方已經講明了 <em>CentOS Stream is focused on the next RHEL minor release</em>.</p><p>然後 RHEL/CentOS 的 minor release 就是擺明不會變這些東西，想要用新套件/新東西，就是抓 software collection、module stream、epel、第三方repo 來用，不會也不應該因為 <code>dnf update</code>/<code>yum update</code> 之後一切都炸了</p><p>所以 <em>no longer test or build EPEL packages locally</em> 根本就偏離事實，再說如果真的是「packaging」的話，RHEL 和 CentOS 的套件相依性本來就完全對不起來了，換成 CentOS Stream 不會因此有什麼改變</p><h2 id="社群反應"><a href="#社群反應" class="headerlink" title="社群反應"></a>社群反應</h2><p>但現在的風向都一面倒認為不應該限制別人用 RHEL 吃剩的 CentOS (8.x/9.x…)，連當初 CentOS 的 Founder 都說要來 fork 出 Rocky Linux</p><p>好吧，我懷疑我的想法太天真了</p><p>但過往的 CentOS 的社群風氣、使用者/貢獻者比例，相對於其他發行版真的差太多了，RHEL 8 出來時<a href="https://www.centos.org/forums/viewtopic.php?f=10&t=71468">追 CentOS 8 開發進度</a>時才在 <a href="https://lists.centos.org/pipermail/centos-devel/2019-September/017694.html">mailing list</a> 發現維運這個專案的工作人力只有 3 個人，不做出這樣策略性的改變，懷疑 CentOS 發行版還能撐多久? (IBM/RedHat 也不可能無限制地投入資源)，所以即使 Rocky Linux 真的出來了，我也懷疑這樣的動力能維持多久 (或許它能夠號召到更多有同樣需求的贊助商吧)</p><h2 id="參考資源"><a href="#參考資源" class="headerlink" title="參考資源"></a>參考資源</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;自從 12/8 CentOS blog 和 Mailing list 相繼宣佈將要轉移開發重心到 CentOS Stream 上，並計劃要讓 CentOS 8.x (有版號的 release) 提前退休後&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.centos.org/2020/12/future-is-centos-stream/&quot;&gt;https://blog.centos.org/2020/12/future-is-centos-stream/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://lists.centos.org/pipermail/centos-announce/2020-December/048208.html&quot;&gt;https://lists.centos.org/pipermail/centos-announce/2020-December/048208.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;甚至出現&lt;a href=&quot;https://www.cyberciti.biz/linux-news/centos-linux-8-will-end-in-2021-and-shifts-focus-to-centos-stream/&quot;&gt;報導&lt;/a&gt;指出：CentOS Stream 不會比 RHEL 早拿到安全更新，又要幫 RHEL 先測試新套件，同時因為 CentOS Stream 的環境比較新，你在 CentOS Stream 上面構建的套件還無法移植回 RHEL 上&lt;/p&gt;
&lt;p&gt;但我認為這個論點有一些不充分甚至是誤導的地方。&lt;/p&gt;</summary>
    
    
    
    
    <category term="operating-system" scheme="http://sean0921.github.io/tags/operating-system/"/>
    
    <category term="linux" scheme="http://sean0921.github.io/tags/linux/"/>
    
    <category term="redhat" scheme="http://sean0921.github.io/tags/redhat/"/>
    
    <category term="centos" scheme="http://sean0921.github.io/tags/centos/"/>
    
    <category term="centos-stream" scheme="http://sean0921.github.io/tags/centos-stream/"/>
    
    <category term="rhel" scheme="http://sean0921.github.io/tags/rhel/"/>
    
  </entry>
  
</feed>
