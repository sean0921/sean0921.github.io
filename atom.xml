<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean&#39;s Blog</title>
  
  <subtitle>less is more, old is new.</subtitle>
  <link href="https://blog.clam.ml/atom.xml" rel="self"/>
  
  <link href="https://blog.clam.ml/"/>
  <updated>2022-05-06T03:19:15.692Z</updated>
  <id>https://blog.clam.ml/</id>
  
  <author>
    <name>Sean Ho</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 Ubuntu 桌面中使用 Python 將檔案丟到資源回收桶</title>
    <link href="https://blog.clam.ml/2022/05/05/use-glib-gio-in-python3/"/>
    <id>https://blog.clam.ml/2022/05/05/use-glib-gio-in-python3/</id>
    <published>2022-05-05T15:02:56.000Z</published>
    <updated>2022-05-06T03:19:15.692Z</updated>
    
    <content type="html"><![CDATA[<p>假如你在 Ubuntu 使用 Python 進行資料處理，對於一些檔案懷抱著想移出視線又怕刪掉就回不去的情感，怎麼辦? 這篇文章介紹的工具與概念，或許可以提供你一個對於整合桌面環境更加友善的方向。</p><span id="more"></span><h2 id="初始情境">初始情境</h2><ul><li>我們在用 Python 進行資料處理的時候，會想將不要的檔案移出工作目錄，但又不想要不小心誤刪檔案而救不回來。類似 mv 的操作也會有同名檔案處理起來相對複雜的問題。</li><li>Python 的標準函式庫的檔案相關操作，無法滿足在桌面使用情境下對應的操作需求，以這邊為例就是<em>把檔案丟到資源回收桶</em>。</li></ul><h2 id="簡化問題">簡化問題</h2><ul><li>我只是想把檔案丟到資源回收筒</li></ul><h2 id="可利用方法">可利用方法</h2><ul><li>我們想要在 GNOME 桌面環境將檔案丟到資源回收桶，有哪些方式呢:<ol><li>使用檔案總管(Nautilus)將檔案拖拉到資源回收桶資料夾</li><li>透過 <code>gio</code> 對檔案進行操作</li><li>透過呼叫 Glib 中 Gio 的相關函式對檔案進行操作</li></ol></li><li>這邊要介紹的主要是第三種，而第二種為第三種的簡易應用。</li></ul><h2 id="甚麼是-Glib、在-Gtk-家族裡的關係">甚麼是 Glib、在 Gtk 家族裡的關係?</h2><ul><li>GLib 是 GNOME 將原本 gtk 函式庫裡面跟圖形介面無關的底層程式碼獨立出來的一個專案, 它們和其他 gtk 相關專案的關係圖如下:<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/GTK%2B_software_architecture.svg/2560px-GTK%2B_software_architecture.svg.png" alt=""></li></ul><h2 id="如何使用-Python-將檔案丟到資源回收桶">如何使用 Python 將檔案丟到資源回收桶</h2><ul><li>首先，作業系統環境一定要安裝 GLib 函式庫，Python 套件則是需要安裝 PyGObject</li><li>若想透過 <code>gio</code> 等 shell 指令直接對 GLib 進行利用，在 Debian/Ubuntu 下需要確認是否有安裝到 <code>libglib2-bin</code> (該類發行版套件會切比較細)</li></ul><h3 id="相關程式碼">相關程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;/path/to/filename&#x27;</span></span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> Gio</span><br><span class="line">a=Gio.File.new_for_path(file_path)</span><br><span class="line"><span class="keyword">if</span> a.trash() == <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;file_path&#125;</span> is moved to trash!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上程式碼大致可以對應到 <code>gio trash /path/to/filename</code> 這個指令，若是對應圖形介面操作，就是把 <code>/path/to/filename</code> 丟到資源回收桶，完工</p><h2 id="API-Reference">API Reference</h2><p>這邊直接附上 GLib 的函式庫(1)，至於 PyGObject 那一側則還沒找到官方詳細文件，因此先拿它恰巧有出沒過的文件連結(2)替代，若有找到更完整的資料歡迎提供！</p><ol><li><a href="https://lazka.github.io/pgi-docs/Gio-2.0/classes/File.html#Gio.File">https://lazka.github.io/pgi-docs/Gio-2.0/classes/File.html#Gio.File</a></li><li><a href="https://pygobject.readthedocs.io/en/latest/guide/threading.html?highlight=Gio.File#asynchronous-operations">https://pygobject.readthedocs.io/en/latest/guide/threading.html?highlight=Gio.File#asynchronous-operations</a></li></ol><h2 id="應用-send2trash">應用: send2trash</h2><p>於是這樣簡潔方便的介面使得 <a href="https://github.com/arsenetar/send2trash/">send2trash</a> 這個第三方 Python 套件於 2013 年即開始支援以 Gio 來進行檔案移至資源回收筒的<a href="https://github.com/arsenetar/send2trash/blob/master/send2trash/plat_gio.py">實作</a>方式。是不是相當單純呢?</p><h2 id="結語與討論">結語與討論</h2><p>GLib 除了本文介紹的範例外，也有許多有趣的模組與函式可以讓我們探索與應用，理解其概念，也將對我們開發、協助除錯 GNOME、GTK 相關開源桌面程式有莫大幫助，是個值得一探究竟的專案！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;假如你在 Ubuntu 使用 Python 進行資料處理，對於一些檔案懷抱著想移出視線又怕刪掉就回不去的情感，怎麼辦? 這篇文章介紹的工具與概念，或許可以提供你一個對於整合桌面環境更加友善的方向。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.clam.ml/tags/linux/"/>
    
    <category term="opensource" scheme="https://blog.clam.ml/tags/opensource/"/>
    
    <category term="python" scheme="https://blog.clam.ml/tags/python/"/>
    
    <category term="GLib" scheme="https://blog.clam.ml/tags/GLib/"/>
    
    <category term="Gio" scheme="https://blog.clam.ml/tags/Gio/"/>
    
    <category term="Gtk" scheme="https://blog.clam.ml/tags/Gtk/"/>
    
    <category term="GNOME" scheme="https://blog.clam.ml/tags/GNOME/"/>
    
    <category term="data operation" scheme="https://blog.clam.ml/tags/data-operation/"/>
    
    <category term="Ubuntu" scheme="https://blog.clam.ml/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>如何在串流播放器使用 youtube-dl 的替代品 - 以 mpv 為例</title>
    <link href="https://blog.clam.ml/2021/10/16/mpv-ytdl-alternative/"/>
    <id>https://blog.clam.ml/2021/10/16/mpv-ytdl-alternative/</id>
    <published>2021-10-15T21:19:42.000Z</published>
    <updated>2022-05-06T03:19:15.692Z</updated>
    
    <content type="html"><![CDATA[<p>Youtube-dl 歷經了一連串 DMCA 爭議後一度被 GitHub 下架，後來雖然恢復，但開發能量已大不如前，也開始出現了各種替代方案來因應。本篇文章將以 mpv 影音播放器為例，介紹如何在該軟體 0.33 之後的版本快速替換 youtube-dl 外掛所使用的路徑。</p><span id="more"></span><h2 id="youtube-dl-與-mpv">youtube-dl 與 mpv</h2><p>不想被既有影音平臺使用規則限制的人都知道，除了坊間上流傳來來去去的影音下載網站以外，最知名、自己來用起來最方便的工具就是 youtube-dl 了。而 youtube-dl 除了直接下載各影音網站的內容儲存外，也可以用將它整合到你喜愛的影音播放軟體，直接播放串流影音。這類軟體包含但不限於 <a href="https://mpv.io/">mpv</a> 以及<a href="https://github.com/mpv-player/mpv/wiki/Applications-using-mpv">以它為基礎的播放器</a>。</p><h2 id="如何下載-youtube-dl-與-mpv">如何下載 youtube-dl 與 mpv</h2><p>在 Linux/FreeBSD 平臺上安裝 mpv 是一件極度容易的事情，通常透過套件管理員安裝即可，以 Ubuntu 為例就是: <code>sudo apt install mpv</code> 和 <code>pip3 install --user youtube-dl</code> 。而 Windows 使用者則是可以到 mpv 官網列的<a href="https://mpv.io/installation/">下載列表</a>看哪個安裝方式最符合你的需求，通常我會去<a href="https://sourceforge.net/projects/mpv-player-windows/files/">第一個</a>選「Download Latest Version」來安裝，解壓縮 <code>bootstraper</code> 資料夾點選 <code>update.bat</code> 安裝後，對於所有問題一律按「y」回答，就會把 mpv 和 youtube-dl 都幫你裝好了。剩下如何操作的部分，</p><h2 id="如何用-mpv-播放串流影音">如何用 mpv 播放串流影音</h2><p>若你想透過 mpv 播放你喜歡的影音網址，你可以在安裝完畢後開啟命令列，輸入 <code>mpv &lt;影音網址&gt;</code> 後即可播放，例如嘗試以下指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mpv https://youtu.be/dQw4w9WgXcQ   ## 支援 YouTube</span><br><span class="line">mpv https://vimeo.com/148751763    ## 支援 Vimeo</span><br></pre></td></tr></table></figure><p>你也可以將瀏覽器上的 youtube 連結拖入已經開啟的 mpv 視窗中:<br><img src="https://i.imgur.com/Ap5bYB1.png" alt=""></p><p>當然如果你有可以存取的 <a href="https://zh.wikipedia.org/wiki/HTTP_Live_Streaming">HLS 串流網址</a>，也可以直接丟給 mpv 來播放。</p><p>這樣子當我們不確定 youtube 影片的內容，又不想幫連廢片都不如的內容衝流量，就可以用這樣的方式來觀看，除此之外也仍然有阻擋廣告、硬體解碼(節省電腦運算資源)、一鍵截圖…等結合這兩個軟體各種方便的特性。</p><h2 id="youtube-dl-的爭議與沒落">youtube-dl 的爭議與沒落</h2><p>但這個專案首先歷經了一連串 DMCA 爭議後一度被 GitHub 下架，後來雖然恢復，但開發能量已大不如前，最後一次更新的時間是三個月前，上一次釋出版號的時間也已經是四個月前，回不去以往隔數天~一週就釋出新版號的開發節奏了。這也意味著當各大影音平臺改變策略，嘗試阻擋第三方存取的方式時，這個套件將難以再迅速因應。同時也無法再新增其他影音網站平臺的支援。</p><h2 id="youtube-dl-的替代方案">youtube-dl 的替代方案</h2><p>youtube-dl 是基於 <a href="https://unlicense.org/">Unlicence</a> 授權，因此也開始陸續出現許多分支來嘗試繼承開發能量，像 DMCA 下架事件就開始出現 <a href="https://github.com/blackjack4494/yt-dlc">youtube-dlc</a>，但後來也無疾而終。</p><p>而個人關注，且最近還有持續的開發的分支則是 <a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a>, 目前有維持一定的開發節奏且持續釋出新版本，是現階段值得使用的替代方案，也可以改善原版 youtube-dl 偶發性無法存取的問題。</p><p>這些套件都可以透過 <code>pip install --user 套件名稱</code> 來安裝，或是直接到 GitHub Release 頁面下載 exe 檔。</p><h2 id="如何在-mpv-使用-youtube-dl-替代方案">如何在 mpv 使用 youtube-dl 替代方案</h2><p>以下以 yt-dlp 取代 youtube-dl 為例</p><h3 id="重新命名執行檔-不推薦">重新命名執行檔(不推薦)</h3><p>這個方法滿單純的，就是找出 youtube-dl 的執行路徑，Windows 平臺你是在哪個路徑執行 <code>youtube-dl.exe</code> 這個程式，通常會跟 <code>mpv.exe</code> 安裝在同一個資料夾下。Linux/FreeBSD 等平臺則是在一個優先度比較高的 <code>$PATH</code> 路徑下，建立一個軟連結到 yt-dlp 的執行檔路徑。例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -rsv <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.local/bin/yt-dlp&quot;</span> <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.local/bin/youtube-dl&quot;</span>   <span class="comment">## 如果路徑衝突，請自行解決或解除安裝原版 youtube-dl</span></span><br></pre></td></tr></table></figure><h3 id="更改-mpv-設定檔-適用於-0-33-版本">更改 mpv 設定檔 (適用於 &gt;= 0.33 版本)</h3><p>上一個方法看似單純，卻容易在更新套件時把你的環境搞炸。因此我會建議能將 mpv 更新到此版本的使用者都使用此方法。</p><p>首先我們可以先找出 mpv 設定檔的存放路徑，相關說明可以在官方文件找到。Windows 的使用者可以將它放在 <code>%USERPROFILE%\AppData\Roaming\mpv\mpv.conf</code> 或是同資料夾下的 <code>portable_config\mpv.conf</code>，Linux/FreeBSD 使用者則是可以去 <code>~/.config/mpv/mpv.conf</code> 新增或更改自己的設定檔。</p><p>然後我們只需要在設定檔新增以下一行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script-opts=ytdl_hook-ytdl_path=/home/user/.local/bin/yt-dlp</span><br></pre></td></tr></table></figure><p>(<code>/home/user/.local/bin/yt-dlp</code> 改成你放 yt-dlp 執行檔的路徑)</p><p>這樣就不用更改任何環境變數、改檔名或是建立軟連結囉！</p><h3 id="Ubuntu-Debian-Linux-使用者如何更新-mpv-到-0-33-版本">Ubuntu/Debian Linux 使用者如何更新 mpv 到 &gt;= 0.33 版本?</h3><p>從 <a href="https://salsa.debian.org/multimedia-team/mpv">Debian Salsa</a> 平臺可以看到，Debian 的維護者已經將最新版的 mpv 打包進 unstable 了，如果想在 Debian 11(stable) 或是 Ubuntu LTS 版本，都可以參考 Debian 的 <a href="https://wiki.debian.org/BuildingTutorial">Building Tutorial</a> 來打包你想要的套件版本，另外 Debian 11 的使用者也可以使用 <a href="/2021/08/22/project-ctpb/">CTPB 專案</a>幫你包好的 mpv 0.33.1 套件，讓你在 Debian 上更輕易的享受新版 mpv 的特性！</p><h2 id="結語">結語</h2><p>當我們觀看著影音的同時，我們也正在被平台提供商用各種意想不到的方式觀看著！<br>當然我們也可以積極關注更為開放、重視分享精神的影音平臺: 像是 <a href="https://wiwi.video/about/instance">wiwi</a> 推薦的 <a href="https://zh.wikipedia.org/wiki/PeerTube">PeerTube</a> 或 <a href="https://zh.wikipedia.org/wiki/LBRY">LBRY</a>。</p><p>但短時間內我們無法構造改革，因此我們使用這些工具，來讓我們仍然保有不被平臺限制使用存取方式的選擇，也能讓觀看影片的體驗更加彈性，應用到更多層面。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Youtube-dl 歷經了一連串 DMCA 爭議後一度被 GitHub 下架，後來雖然恢復，但開發能量已大不如前，也開始出現了各種替代方案來因應。本篇文章將以 mpv 影音播放器為例，介紹如何在該軟體 0.33 之後的版本快速替換 youtube-dl 外掛所使用的路徑。&lt;/p&gt;</summary>
    
    
    
    
    <category term="youtube-dl" scheme="https://blog.clam.ml/tags/youtube-dl/"/>
    
    <category term="mpv" scheme="https://blog.clam.ml/tags/mpv/"/>
    
    <category term="yt-dlp" scheme="https://blog.clam.ml/tags/yt-dlp/"/>
    
    <category term="video-streaming" scheme="https://blog.clam.ml/tags/video-streaming/"/>
    
  </entry>
  
  <entry>
    <title>Project CTPB 簡介</title>
    <link href="https://blog.clam.ml/2021/08/22/project-ctpb/"/>
    <id>https://blog.clam.ml/2021/08/22/project-ctpb/</id>
    <published>2021-08-22T06:02:36.000Z</published>
    <updated>2022-05-06T03:19:15.692Z</updated>
    
    <content type="html"><![CDATA[<p>在 2021 年，Linux 發行版等開源作業系統的普及率仍無法與 Microsoft Windows、Mac OS 等相比，但相關生態系與商業應用與 10 年前相比已有明顯成長，然而在 Linux 發行版的軟體安裝上，仍因為安裝方式不一，操作指令過於多樣，甚至多數商業軟體公司發行的開源/非開源套件是以「把所有用到函式庫都包在一起的方式」發行軟體，以方便忽視軟體相依性之問題，卻明顯違背了 Linux 發行版套件管理機制最初的用意。</p><p>本專案，Clam-Test Package Build Project，簡稱 Project CTPB，藉由簡化、粗略的套件打包原理，提供各(非滾動式為主)發行版沒有提供，或是有提供但版本無法滿足特定需求的客製化套件。以滿足個人與特定需求使用者需要。並將相關步驟原理整理起來，作為研究、討論、交流、推廣等用途。往後相關資訊將會更新在本文章內文。或是以 <em>pj-ctpb</em> 的標籤發表新的 blog 系列文章，以供各界朋友指教。</p><span id="more"></span><h2 id="第一階段-apt-ftparchive-gpg-github-page">第一階段: apt-ftparchive + gpg + github-page</h2><ul><li>網址: <a href="https://gh.pkg.clam.ml/">https://gh.pkg.clam.ml/</a></li></ul><p>To be continued…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 2021 年，Linux 發行版等開源作業系統的普及率仍無法與 Microsoft Windows、Mac OS 等相比，但相關生態系與商業應用與 10 年前相比已有明顯成長，然而在 Linux 發行版的軟體安裝上，仍因為安裝方式不一，操作指令過於多樣，甚至多數商業軟體公司發行的開源/非開源套件是以「把所有用到函式庫都包在一起的方式」發行軟體，以方便忽視軟體相依性之問題，卻明顯違背了 Linux 發行版套件管理機制最初的用意。&lt;/p&gt;
&lt;p&gt;本專案，Clam-Test Package Build Project，簡稱 Project CTPB，藉由簡化、粗略的套件打包原理，提供各(非滾動式為主)發行版沒有提供，或是有提供但版本無法滿足特定需求的客製化套件。以滿足個人與特定需求使用者需要。並將相關步驟原理整理起來，作為研究、討論、交流、推廣等用途。往後相關資訊將會更新在本文章內文。或是以 &lt;em&gt;pj-ctpb&lt;/em&gt; 的標籤發表新的 blog 系列文章，以供各界朋友指教。&lt;/p&gt;</summary>
    
    
    
    
    <category term="packaging" scheme="https://blog.clam.ml/tags/packaging/"/>
    
    <category term="linux" scheme="https://blog.clam.ml/tags/linux/"/>
    
    <category term="opensource" scheme="https://blog.clam.ml/tags/opensource/"/>
    
    <category term="pj-ctpb" scheme="https://blog.clam.ml/tags/pj-ctpb/"/>
    
  </entry>
  
  <entry>
    <title>在 SELinux 環境下建立發行版鏡像站需要處理的權限問題</title>
    <link href="https://blog.clam.ml/2021/07/25/rsync-tmp-file-under-selinux/"/>
    <id>https://blog.clam.ml/2021/07/25/rsync-tmp-file-under-selinux/</id>
    <published>2021-07-25T10:34:20.000Z</published>
    <updated>2022-05-06T03:19:15.692Z</updated>
    
    <content type="html"><![CDATA[<p>這篇筆記主要描述如何從 rsync 運作原理，來理解在 SELinux 啟用的情況下，如何正確設定 rsync 暫存區路徑參數與暫存目錄權限。rsync 接收同步資料時，會先將抓取未驗證的檔案放在暫存目錄，經校驗無誤後再移動到同步目的地。如果 rsync 設定 <code>--temp-file</code> 目錄路徑的預設 context 與目的地目錄的不同，則會發生目的地出現檔案實際 context 與該路徑下預設內容不符的情況，進而造成服務讀取時發生權限錯誤問題。解決方法有二: 1. 將暫存目錄的 context 設定成和同步目的地的一樣。 2. 取消設置 <code>--temp-file</code> 參數，此時未驗證的暫存檔就會存放在同步目的地所在的目錄底下。</p><span id="more"></span><h2 id="簡介">簡介</h2><p>SELinux 是讓 Linux 系統管理者又愛又恨的安全性模組之一，它可以保護我們避免自己或他人不恰當的資源誤用，但更多時候我們則是被它複雜的權限設定所困惑，進而將其設定為 Permissive 甚至是 Disabled 來逃避現實。這篇筆記主要描述如何從 rsync 運作原理，來理解在 SELinux 啟用的情況下，如何正確設定 rsync 暫存區路徑參數與暫存區權限。</p><h2 id="會用到的-SELinux-觀念">會用到的 SELinux 觀念</h2><p>從鳥哥的中文文件<sub><a href="http://linux.vbird.org/linux_basic/0440processcontrol.php#selinux">1</a></sub>以及 Red Hat 的官方文件<sub><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/selinux_users_and_administrators_guide/index">2</a></sub>我們可以大致理解 SELinux 主要想管理重點包含「程序是否能正確讀取『對應』的檔案資源」。</p><p>以使用 <a href="https://zh.wikipedia.org/wiki/Nginx">nginx</a> 架設單純的靜態網頁伺服器為例，我們只預期外部使用者 <a href="https://zh.wikipedia.org/wiki/Nginx">nginx</a> 只會存取到: <code>/var/www/html/</code> 或是 <code>/usr/share/nginx/html</code> 的內容，其他非經管理者允許，不小心或刻意讀取到其他路徑下的檔案內容的行為可能都是「邪魔歪道」。</p><p>因此我們會發現利用 <code>ls -Z</code> 列出類似路徑下的檔案參數內容，多會顯示帶有 <code>httpd_sys_content_t</code> 這個標籤，表示這些檔案可以被特定的 http 服務存取，例如 Nginx 或 Apache。</p><p>照這樣來看，如果想要透過 http server 把檔案分享給別人，讓其他路徑下的檔案也能被 http server 存取的方法就是透過 selinux 的管理指令: <code>semanage</code>，將該路徑底下的預設檔案標籤也設定為 <code>httpd_sys_content_t</code></p><p>如果我們想讓檔案能透過其他的公開服務來存取 (ftp, rsync…)，我們還可以把標籤設定成 <code>public_content_t</code>。</p><p>這大概就是我們設定 SELinux 相關內容前，大概要理解的觀念</p><h2 id="會用到的-rsync-觀念">會用到的 rsync 觀念</h2><p>把 rsync 用到的觀念講得最簡明扼要的文件大概就是它自己的官方文件了<sub><a href="https://rsync.samba.org/how-rsync-works.html">3</a></sub></p><p>文件把該 rsync 套件會用到的角色(或程序)分成: client, server, daemon, remote shell, sender, receiver, generator</p><p>以我們想要同步上游 rsync 鏡像站為例，我們是 client，他們是 server，他們同時也有 daemon 的角色(持續地在背景跑 <code>rsyncd</code>)，也因此我們不會用到 remote shell，也就是不會透過 <a href="https://zh.wikipedia.org/wiki/Secure_Shell"><code>ssh</code></a>, <a href="https://zh.wikipedia.org/wiki/%E8%BF%9C%E7%A8%8B%E5%A4%96%E5%A3%B3"><code>rsh</code></a>… 等傳輸協定來存取他們的 rsync 服務，而是使用 rsync 自己的協定。他們接受我們要求傳檔案給我們，我們接收檔案，所以 sender 會跑在他們那邊，我們是則會跑 receiver，並在接收到檔案列表後 fork 出 generator 和 receiver，分別進行檔案檢查與接收檔案的工作。</p><p>其中我比較在意的部分在 The Receiver 那邊提到的:</p><blockquote><p>The file’s checksum is generated as the temp-file is built. At the end of the file, <em><strong>this checksum is compared with the file checksum from the sender. If the file checksums do not match the temp-file is deleted.</strong></em><br>…<br>After the temp-file has been completed, its ownership and permissions and modification time are set. It is then <em><strong>renamed to replace the basis file</strong></em>.</p></blockquote><p>以及 <code>rsync(1)</code> man page<sub><a href="https://man7.org/linux/man-pages/man1/rsync.1.html">4</a></sub>提到的:</p><blockquote><p>This (<code>--checksum</code>) changes the way rsync checks if the files have been changed and are in need of  a  transfer.   Without  this  option, rsync  uses a  “quick check” that (by default) checks if each <em><strong>file’s size</strong></em> and <em><strong>time of last modification</strong></em> match between the sender and receiver.</p></blockquote><p>也就是說</p><ol><li>如果有啟用 <code>--checksum</code> 參數，在確認 checksum (聽說較新版本 rsync 是用 MD5) 沒問題後，temp file 就會從暫存路徑移動到目的地路徑取代原始檔案。</li><li>如果沒有啟用  <code>--checksum</code> 參數，rsync 會使用「快速檢查行為」(“quick check” behavior)，確認最後修改時間和檔案大小沒問題後，temp file 就會從暫存路徑移動到目的地路徑取代原始檔案。</li></ol><p>結果是一樣的，<em>會從暫存路徑移動到目的地路徑取代原始檔案</em>，只是檢查機制不同，<code>--checksum</code> 會比較嚴格一點。</p><h2 id="實例解說-在-SELinux-啟用的系統上鏡像-Arch-Linux-套件庫">實例解說: 在 SELinux 啟用的系統上鏡像 Arch Linux 套件庫</h2><p>Arch Linux 是一個相當新穎、簡潔的 <strong>x86_64</strong> 發行版，注意這邊也因為它官方只支援 x86_64 這個架構，因此實際把它官方套件庫的全部檔案抓下來，會發現不含 iso 檔大概只有 70 GiB 不到 ( Ubuntu 官方套件庫不含 iso 檔大概要佔用將近 1.5T 的容量)。也因此較適合拿來用一般的硬體資源來練習架設鏡像站。</p><p>但如果我們使用 Arch Linux 官方附的建議腳本<sub><a href="https://gitlab.archlinux.org/archlinux/infrastructure/-/blob/master/roles/syncrepo/files/syncrepo-template.sh">5</a></sub>來同步上游 rsync mirror 的套件庫，並把每個留白的參數都根據自己需求填入資訊，會發生什麼事情呢?</p><p>首先，假設我們要存放 mirror 內容的路徑是 <code>/mnt/mirror</code>，我們仍先把要共享 mirror 檔案內容的目錄及其下所有檔案的標籤都設爲 <code>public_content_t</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">semanage fcontext -a -t public_content_t &quot;/mnt/mirror(/.*)?&quot;</span><br><span class="line">restorecon -Rv /mnt/mirror</span><br></pre></td></tr></table></figure><p>接著再來執行我們修改過後的同步腳本，然後回去 <code>ls -Z</code> 看看:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">unconfined_u:object_r:unlabeled_t:s0 community</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 community-staging</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 community-testing</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 core</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 extra</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 gnome-unstable</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 images</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 kde-unstable</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 lastsync</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 lastupdate</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 multilib</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 multilib-staging</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 multilib-testing</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 pool</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 staging</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 testing</span><br></pre></td></tr></table></figure><p>咦? 我們沒看錯吧? 於是我們再次 <code>restorecon -Rv /mnt/mirror</code> 後，等待下次更新:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">unconfined_u:object_r:public_content_t:s0 community</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 community-staging</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 community-testing</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 core</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 extra</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 gnome-unstable</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 images</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 kde-unstable</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 lastsync</span><br><span class="line">unconfined_u:object_r:unlabeled_t:s0 lastupdate</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 multilib</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 multilib-staging</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 multilib-testing</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 pool</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 staging</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 testing</span><br></pre></td></tr></table></figure><p>現在變成有被更新的檔案都會被 unlabeled 了，這是為什麼呢?</p><p>後來經歷一連串的測試之後，終於確定了問題出在 <code>--temp-file</code> 的這個參數，假設我們藉由該參數設定 rsync 暫存路徑為 <code>/mnt/mirror_tmp</code>，接下來我們來進行一個小實驗，任意設定該路徑的 selinux 標籤，改成對 rsync client 沒任何用途的 <code>rsync_tmp_t</code>，並把 <code>/mnt/mirror</code> 的標籤回復後，等待下次進行同步:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">unconfined_u:object_r:public_content_t:s0 community</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 community-staging</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 community-testing</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 core</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 extra</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 gnome-unstable</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 images</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 kde-unstable</span><br><span class="line">unconfined_u:object_r:rsync_tmp_t:s0 lastsync</span><br><span class="line">unconfined_u:object_r:rsync_tmp_t:s0 lastupdate</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 multilib</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 multilib-staging</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 multilib-testing</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 pool</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 staging</span><br><span class="line">unconfined_u:object_r:public_content_t:s0 testing</span><br></pre></td></tr></table></figure><p>此時有被更新過檔案的 selinux 標籤就變成了 <code>rsync_tmp_t</code> 了</p><h3 id="小結">小結</h3><p>於是我們可以確定：</p><p>如果給 rsync 用的暫存目錄 ( <code>--temp-dir</code> ) 放在 selinux context 設定路徑以外的地方，就會使得 rsync 同步完後的 context 變成預期外的內容，進而造成 selinux 的權限錯誤。</p><h3 id="解決方案">解決方案</h3><ol><li>把 temp dir 的 context 設定成和同步目的地一樣的內容</li><li>不要設定 <code>--temp-dir</code> 參數 (這樣暫存檔的位置就會同步目的地一樣的目錄底下)</li></ol><h2 id="總結">總結</h2><p>雖然 SELinux 對於系統管理者在資源的運用上給予了相當多綁手綁腳的限制，但釐清相關運作流程的觀念與細節之後，就可以讓 SELinux 成為使得 Linux 系統服務安全的重要夥伴。這次在 rsync 同步雖然也踩到這個一開始令人困惑的問題，但同樣也藉此進一步地理解了 rsync 相關運作流程和 SELinux 觀念，給予了我們不小啟發。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這篇筆記主要描述如何從 rsync 運作原理，來理解在 SELinux 啟用的情況下，如何正確設定 rsync 暫存區路徑參數與暫存目錄權限。rsync 接收同步資料時，會先將抓取未驗證的檔案放在暫存目錄，經校驗無誤後再移動到同步目的地。如果 rsync 設定 &lt;code&gt;--temp-file&lt;/code&gt; 目錄路徑的預設 context 與目的地目錄的不同，則會發生目的地出現檔案實際 context 與該路徑下預設內容不符的情況，進而造成服務讀取時發生權限錯誤問題。解決方法有二: 1. 將暫存目錄的 context 設定成和同步目的地的一樣。 2. 取消設置 &lt;code&gt;--temp-file&lt;/code&gt; 參數，此時未驗證的暫存檔就會存放在同步目的地所在的目錄底下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.clam.ml/tags/linux/"/>
    
    <category term="sysadmin" scheme="https://blog.clam.ml/tags/sysadmin/"/>
    
    <category term="rsync" scheme="https://blog.clam.ml/tags/rsync/"/>
    
    <category term="selinux" scheme="https://blog.clam.ml/tags/selinux/"/>
    
    <category term="mirroring" scheme="https://blog.clam.ml/tags/mirroring/"/>
    
  </entry>
  
  <entry>
    <title>Ptt/Ptt2 近期對於 SSH 連線實作的更動</title>
    <link href="https://blog.clam.ml/2021/07/04/ptt-is-testing-new-sshd/"/>
    <id>https://blog.clam.ml/2021/07/04/ptt-is-testing-new-sshd/</id>
    <published>2021-07-04T09:49:11.000Z</published>
    <updated>2022-05-06T03:19:15.692Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章將以使用者與 BBS 程式測試者的角度觀察，最近 PttBBS 對於 ssh 連線提供服務方式的更動，以及對於一般使用者可能造成的影響，此次更動相關的原始碼以及實作說明還沒被公開，因此若與往後官方說明有出入者，請以他們的為準。</p><p>近 10 年來，BBS 已然沒落，但批踢踢實業坊 (<a href="https://www.ptt.cc">PttBBS</a>) 依然因為對於社會議題輿論產生重大影響、多位 app 開發者提供第三方手機連線服務…等因素，在尖峰時間維持數萬 ~ 十幾萬人次的同時上線人數。</p><p>然而近幾年以來卻開始愈來愈頻繁地發生尖峰時間 Ptt 無法正常登入的負載問題，尤其在近幾個月來更是出現一般使用者認為中規模的事件，如：小區域地震、三級警戒以來每天召開的防疫記者會，Ptt 也仍因過載無法登入的窘況。也開始引發各看板，包含 <a href="https://www.ptt.cc/bbs/SYSOP/">SYSOP 站務板</a>大大小小的抱怨。</p><p>對此站方有什麼積極應對解決的方案呢？其實是有的。以下根據初步觀察大概分成四個階段：觀察、分析、嘗試方案、解決(正式上線)</p><span id="more"></span><h2 id="觀察">觀察</h2><p>為了確認各種連線問題造成的原因，首先 Ptt 站務總監 okcool 先在理論上較多針對 Ptt 的 App 開發者所在看板：<a href="https://www.ptt.cc/bbs/AppsForBBS/index.html">AppsForBBS 板</a>，籲請各 App 開發者在使用 websocket 連線登入時，配合加上 User-Agent 資訊，以方便統計各軟體使用 Websocket 的連線狀況。</p><p>至於其他連線方式(ssh, telnet)，根據既有的公開程式可以得知都會留下相關記錄，因此這方面就不再說明了。</p><h2 id="分析與討論">分析與討論</h2><p>另外在 Ptt、Ptt2 SYSOP 板爬梳一些討論資料，以及 <a href="https://github.com/ptt/pttbbs">PttBBS 原始碼</a>、<a href="https://www.ptt.cc/bbs/PttCurrent/">PttCurrent 板</a>提供的相關文件後，我們可以找到當初 PttBBS 可以承受同時間 15~6 萬人上線，關鍵在於 PttBBS 會經由 logind 程式接收大量 telnet 連線並為各 Client 顯示登入畫面，登入成功後再導入 mbbsd 進行主要的 bbs 指令操作。</p><p>然而，ssh 連線方式的實作則是直接在 Linux Server 開一個 <code>bbs</code> / <code>bbsu</code> 帳號，login shell 分別設爲 <code>/home/bbs/bin/bbsrf</code> 和 <code>/home/bbs/bin/utf8</code> ( symbolic link 到 <code>/home/bbs/bin/bbsrf</code> )，連線成功後即直接開啟 mbbsd 程式進行登入程序。</p><p>引用 BBS 開發者 <a href="https://github.com/IepIweidieng">IepIweidieng(github)</a> 在 <a href="https://discord.ccns.io">CCNS Discord</a> #bbs-dev 的<a href="https://discord.com/channels/330361502643257345/370600485612290060/843869940427522099">描述</a>:</p><blockquote><p><code>logind</code> 在使用者成功登入後才會將使用者的 <code>fd</code> 轉交給 <code>mbbsd</code> 並進行 <code>fork()</code>。<code>mbbsd</code> daemon 模式則是一連線就會 <code>fork()</code>。非 daemon 模式則是完全從頭啟動。</p></blockquote><p>而 PttBBS 傳統上給 ssh 連線用的就是 <code>mbbsd</code> 的非 daemon 模式，<code>fork()</code> 的工作則是交給 OpenSSH Server 的 <code>sshd</code> 來進行。</p><p><img src="https://i.imgur.com/P6w4fjq.png" alt=""></p><p>因此給 PttBBS 用的 <code>logind</code> 效能如何是 PttBBS 開發者可以研究如何改善的，但 OpenSSH Server 的效能調校能改的就相對有限了。</p><p>近年來加密連線防範封包側錄的資訊安全意識興起，ssh 連線被各使用者、手機 Apps 預設值，甚至是 BBS 爬蟲程式(如: <a href="https://github.com/PttCodingMan/PyPtt">PyPtt</a>) 大量採用，因此也開始被懷疑是影響 PttBBS 近年處理大量連線的效能瓶頸。</p><h2 id="嘗試方案-暫停-ssh-連線-觀察">嘗試方案: 暫停 ssh 連線 -&gt; 觀察</h2><p>今年 5 月，COVID-19 在臺灣的本土疫情爆發，因此 PttBBS 遇到的連線效能瓶頸也更加明顯，那段期間在每日 12pm 就會開始出現系統過載的畫面了，更別說是 2pm 召開防疫記者會的時候。那時候站方還有在 SYSOP 板發布<a href="https://www.ptt.cc/bbs/SYSOP/M.1621416649.A.5E7.html">公告</a>，籲請使用者盡量改用 Websocket 加密連線方式來代替。但這樣的籲請措施能做的還是有限，一來 Websocket for BBS 在終端機上還沒有一個相對方便的指令連線方案，另外就是會有使用者反應在尖峯時段用 ssh 連線「搶」進去的機率反而比較高。</p><p>另外在該期間，Ptt 也<a href="https://www.ptt.cc/bbs/PttNewhand/M.1621264236.A.23D.html">暫停</a>了 ssh 連線登入。我們目前認為是作為確認 ssh 造成連線壅塞原因的手段。</p><h2 id="站方解決方案：以-logind-為基礎重新實作-SSH-server">站方解決方案：以 logind 為基礎重新實作 SSH server</h2><p>今年 5/31，Ptt 系統站長 robertabcd 在 <a href="https://term.ptt2.cc">ptt2.cc</a> 發佈公告 ( <code>#1Wj4MGKt (SYSOP)</code> )，宣佈開始在 ptt2 測試新版 SSH。雖然該次以失敗(原因: 部分 client, 如 PuTTY, 登入畫面顯示仍有問題)，但也為 BBS 提供 SSH 連線兼顧效能的可行性，增添了不小的可能。</p><p>後來在 6/7，新版 SSH 再度上線(<code>#1WlJ2MXQ (SYSOP) [ptt2.cc]</code>)，這次使用者操作方面穩定性就提升了不少，也因此過了數天後就上線到 <a href="http://ptt.cc">ptt.cc</a>。這部分也可以從 <code>telnet</code> 或 <code>nc</code> 等工具程式針對 port 22 測試而得知。 (<code>telnet ptt.cc 22</code>)</p><p>以往會得到類似以下結果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ telnet ptt.cc 22                                                                                        [17:37:31]</span><br><span class="line">Trying 140.112.172.2...</span><br><span class="line">Connected to ptt.cc.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">SSH-2.0-OpenSSH_8.4p1</span><br></pre></td></tr></table></figure><p>現在則是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ telnet ptt.cc 22                                                                                        [17:37:31]</span><br><span class="line">Trying 140.112.172.2...</span><br><span class="line">Connected to ptt.cc.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">SSH-2.0-bbs-sshd</span><br></pre></td></tr></table></figure><p>由於 OpenSSH 的版本號碼顯示只能在編譯階段修改，且新版 SSH server 版號顯示也拿掉了 OpenSSH 字樣，因此我們推測新版程式是利用 <a href="https://www.libssh.org/">libssh</a> 結合既有的 logind 提供服務，使透過 SSH 大量登入的連線可以順利交給 <code>logind</code> 處理，解決原本方法在這時產生的效能瓶頸。</p><p><img src="https://i.imgur.com/rphrOxQ.png" alt="7/3 當日使用者上線統計"><br><img src="https://i.imgur.com/6aPiuHM.png" alt="5/13 當日使用者上線統計"></p><p>目前從 <em>主選單 &gt; (X) &gt; (U) &gt; (Y) &gt; (U)</em> 進入昨日使用者統計來觀察 ptt 一天上線人次，已經不若以往每逢尖峰時間必過載的情形發生。但實際上而言能夠承受的密集大量登入程度為何，仍有待時間的考驗，以及是否有重大事件足以提供測試的契機了。</p><h2 id="結語-2">結語</h2><p>在有限的資源下維護開源專案都是不容易的，尤其因為 Ptt 的特殊性質，更難以導入用別人錢(贊助)就可以解決問題的方案。在這樣情況下還能有這樣進展，我們或許該充分體認到這類的事情都不是理所當然的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇文章將以使用者與 BBS 程式測試者的角度觀察，最近 PttBBS 對於 ssh 連線提供服務方式的更動，以及對於一般使用者可能造成的影響，此次更動相關的原始碼以及實作說明還沒被公開，因此若與往後官方說明有出入者，請以他們的為準。&lt;/p&gt;
&lt;p&gt;近 10 年來，BBS 已然沒落，但批踢踢實業坊 (&lt;a href=&quot;https://www.ptt.cc&quot;&gt;PttBBS&lt;/a&gt;) 依然因為對於社會議題輿論產生重大影響、多位 app 開發者提供第三方手機連線服務…等因素，在尖峰時間維持數萬 ~ 十幾萬人次的同時上線人數。&lt;/p&gt;
&lt;p&gt;然而近幾年以來卻開始愈來愈頻繁地發生尖峰時間 Ptt 無法正常登入的負載問題，尤其在近幾個月來更是出現一般使用者認為中規模的事件，如：小區域地震、三級警戒以來每天召開的防疫記者會，Ptt 也仍因過載無法登入的窘況。也開始引發各看板，包含 &lt;a href=&quot;https://www.ptt.cc/bbs/SYSOP/&quot;&gt;SYSOP 站務板&lt;/a&gt;大大小小的抱怨。&lt;/p&gt;
&lt;p&gt;對此站方有什麼積極應對解決的方案呢？其實是有的。以下根據初步觀察大概分成四個階段：觀察、分析、嘗試方案、解決(正式上線)&lt;/p&gt;</summary>
    
    
    
    
    <category term="opensource" scheme="https://blog.clam.ml/tags/opensource/"/>
    
    <category term="foss" scheme="https://blog.clam.ml/tags/foss/"/>
    
    <category term="ptt" scheme="https://blog.clam.ml/tags/ptt/"/>
    
    <category term="ptt2" scheme="https://blog.clam.ml/tags/ptt2/"/>
    
    <category term="bbs" scheme="https://blog.clam.ml/tags/bbs/"/>
    
    <category term="maplebbs" scheme="https://blog.clam.ml/tags/maplebbs/"/>
    
    <category term="openssh" scheme="https://blog.clam.ml/tags/openssh/"/>
    
    <category term="libssh" scheme="https://blog.clam.ml/tags/libssh/"/>
    
  </entry>
  
</feed>
