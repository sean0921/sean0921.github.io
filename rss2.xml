<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sean&#39;s Blog</title>
    <link>http://sean0921.github.io/</link>
    
    <atom:link href="http://sean0921.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>New Blog site construted by Hexo (nodejs package)</description>
    <pubDate>Fri, 04 Dec 2020 04:24:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用 WSL/WSL2 的 gv 取代過時的 gsview</title>
      <link>http://sean0921.github.io/2020/12/04/replace-gsview-with-wsl-gv/</link>
      <guid>http://sean0921.github.io/2020/12/04/replace-gsview-with-wsl-gv/</guid>
      <pubDate>Fri, 04 Dec 2020 04:24:08 GMT</pubDate>
      
      <description>&lt;p&gt;很多人在 Windows 上觀看從 &lt;a href=&quot;https://www.generic-mapping-tools.org/&quot;&gt;GMT&lt;/a&gt; 或 其他繪圖軟體產生的 postscript 檔 (&lt;code&gt;*.ps&lt;/code&gt;) 時，都會選擇下載 Ghostgum GSview 5.0 或破解版 GSview 6.0，然而無論何種版本，該軟體早已不再被官方或第三方維護。有任何軟體問題或是安全性問題基本上等於無解。但 Linux 或其他 Unix-Like 平臺仍有 &lt;a href=&quot;https://www.gnu.org/software/gv/&quot;&gt;GNU gv&lt;/a&gt; 可以使用與回報相關問題，甚至提供 &lt;a href=&quot;https://git.savannah.gnu.org/cgit/gv.git&quot;&gt;git repository&lt;/a&gt; 追蹤開發進度。該如何在 Windows 10 使用呢? 現在我們有比較穩定的方法可以解決這個問題了&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>很多人在 Windows 上觀看從 <a href="https://www.generic-mapping-tools.org/">GMT</a> 或 其他繪圖軟體產生的 postscript 檔 (<code>*.ps</code>) 時，都會選擇下載 Ghostgum GSview 5.0 或破解版 GSview 6.0，然而無論何種版本，該軟體早已不再被官方或第三方維護。有任何軟體問題或是安全性問題基本上等於無解。但 Linux 或其他 Unix-Like 平臺仍有 <a href="https://www.gnu.org/software/gv/">GNU gv</a> 可以使用與回報相關問題，甚至提供 <a href="https://git.savannah.gnu.org/cgit/gv.git">git repository</a> 追蹤開發進度。該如何在 Windows 10 使用呢? 現在我們有比較穩定的方法可以解決這個問題了</p><a id="more"></a><p>最簡單的方法就是<a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10">安裝 WSL</a>，相當於開一個更輕量化的虛擬機，直接進入 WSL 後，在檔案目錄下對要檢視的 <code>gv filename.ps</code> 就搞定了，但如果是一些依賴 <code>gsview32</code>/<code>gsview64</code> 指令的程式呢?</p><p>事實上很單純，主要分成以下步驟</p><h2 id="0-安裝-WSL-VcXsrv"><a href="#0-安裝-WSL-VcXsrv" class="headerlink" title="0. 安裝 WSL, VcXsrv"></a>0. 安裝 WSL, VcXsrv</h2><p>VcXsrv 安裝完啟動後記得選勾選 <code>Disable access control</code>，該程式相關防火牆設定都先打開，若機器長期暴露在公共網路 (有外網ip)，可自行研究 Xorg 的 xauth 怎麼設定，這邊先不細講。</p><p>當然 WSL 要自行安裝 <code>gv</code> 這個套件，也要檢查你的發行版有沒有順便幫你裝 <code>ghostscript</code> 等套件</p><h2 id="1-在自己使用者選項設定客製化執行路徑-PATH"><a href="#1-在自己使用者選項設定客製化執行路徑-PATH" class="headerlink" title="1. 在自己使用者選項設定客製化執行路徑 (%PATH%)"></a>1. 在自己使用者選項設定客製化執行路徑 (<code>%PATH%</code>)</h2><p>相關教學很多，這邊有 <a href="https://java.com/zh-TW/download/help/path_zh-tw.html">Java 的教學</a> 可以參考</p><h2 id="2-在-PATH-底下創建-batch-腳本"><a href="#2-在-PATH-底下創建-batch-腳本" class="headerlink" title="2. 在 %PATH% 底下創建 batch 腳本"></a>2. 在 <code>%PATH%</code> 底下創建 batch 腳本</h2><p>以 WSL 2 為例:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line">wsl.exe -d debian env DISPLAY=&quot;$(ip route|grep &#x27;default via&#x27;|awk &#x27;&#123;<span class="built_in">print</span> $<span class="number">3</span>&#125;&#x27;):<span class="number">0</span>.<span class="number">0</span>&quot; gv %*</span><br></pre></td></tr></table></figure><p>在 DOS batch 腳本的 <code>%*</code> 是指吃所有餵進去的參數 (例如 <code>gv -eof test.ps</code> 的 <code>-eof test.ps</code>)<br>取成你喜歡的指令名，像我取成 <code>gsviewwsl.bat</code></p><h2 id="3-在-Windows-開-cmd，對你要開的檔案進行測試"><a href="#3-在-Windows-開-cmd，對你要開的檔案進行測試" class="headerlink" title="3. 在 Windows 開 cmd，對你要開的檔案進行測試"></a>3. 在 Windows 開 cmd，對你要開的檔案進行測試</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsviewwsl hello.ps</span><br></pre></td></tr></table></figure><p>或許 Cygwin 也可以做一樣的事情，但考量 Cygwin 速度沒有比較快且擴充性差很多，這邊就不研究與介紹了，若有 Windows 7 電腦有類似需求，請再用一樣的概念自己整理方法。</p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/freesoftware-linux/">freesoftware, linux</category>
      
      
      <comments>http://sean0921.github.io/2020/12/04/replace-gsview-with-wsl-gv/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Violet Evergarden 劇場版心得</title>
      <link>http://sean0921.github.io/2020/10/09/violet-evergarden-movie/</link>
      <guid>http://sean0921.github.io/2020/10/09/violet-evergarden-movie/</guid>
      <pubDate>Fri, 09 Oct 2020 15:40:58 GMT</pubDate>
      
      <description>&lt;p&gt;你累了嗎? 先聽首歌，好嗎: &lt;a href=&quot;https://www.youtube.com/watch?v=OrmO23ALlEU&quot;&gt;https://www.youtube.com/watch?v=OrmO23ALlEU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次聽到這個作品的名字是在瀏覽討論京阿尼的文章中看到的，那時聽名字以及看作品封面也沒太大興趣，可能是因為之前嘗試看類似印象的作品不知是因為鋪陳節奏問題還是其它原因，幾乎沒看多少集就放掉了。紫羅蘭的話則是因為肥宅朋友推坑所以決定趁這個機會看一下。或許本身就是一個重視氛圍感受&amp;gt;思考劇情有沒有邏輯的人吧，發現劇情節奏以及情緒體驗都比想像中好很多，於是就決定追到電影院看劇場版了。&lt;/p&gt;
&lt;p&gt;滿多地方都有介紹它的主軸是什麼，以及作品要怎麼補，我就說一下我的感受好了。這部的劇情主線看似就是個思念愛人的愛情故事，但我認為更大的意義在於「理解自己生而為人的各種感情」，最後才回歸主線，做自己能做的事。故事主軸的「愛」也泛指著親情、愛情、友情，因此沒有看起來一直愛來愛去的腐爛感，而是透過各種戰後小故事的鋪陳，帶給人們有個打從心底開始鼓舞自己，擁抱悲傷後走下去的療癒感。&lt;/p&gt;
&lt;p&gt;以下聊聊劇情相關的心得吧 (劇場為主, TV、外傳爲輔)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>你累了嗎? 先聽首歌，好嗎: <a href="https://www.youtube.com/watch?v=OrmO23ALlEU">https://www.youtube.com/watch?v=OrmO23ALlEU</a></p><p>第一次聽到這個作品的名字是在瀏覽討論京阿尼的文章中看到的，那時聽名字以及看作品封面也沒太大興趣，可能是因為之前嘗試看類似印象的作品不知是因為鋪陳節奏問題還是其它原因，幾乎沒看多少集就放掉了。紫羅蘭的話則是因為肥宅朋友推坑所以決定趁這個機會看一下。或許本身就是一個重視氛圍感受&gt;思考劇情有沒有邏輯的人吧，發現劇情節奏以及情緒體驗都比想像中好很多，於是就決定追到電影院看劇場版了。</p><p>滿多地方都有介紹它的主軸是什麼，以及作品要怎麼補，我就說一下我的感受好了。這部的劇情主線看似就是個思念愛人的愛情故事，但我認為更大的意義在於「理解自己生而為人的各種感情」，最後才回歸主線，做自己能做的事。故事主軸的「愛」也泛指著親情、愛情、友情，因此沒有看起來一直愛來愛去的腐爛感，而是透過各種戰後小故事的鋪陳，帶給人們有個打從心底開始鼓舞自己，擁抱悲傷後走下去的療癒感。</p><p>以下聊聊劇情相關的心得吧 (劇場為主, TV、外傳爲輔)</p><a id="more"></a><p><a href="https://www.youtube.com/watch?v=OaO8xKEL-Jc">官方 10min 試看影片</a>，不知道之後會不會下架。</p><p>電影一開始，就很犯規地從 Ann 的故事切入，大概開始約 6 分鐘之後我就快不行了，沒辦法因為我也是第 10 集劇情的受害者.. 而電影的介紹主線就從 Ann 孫女看到那 50 封信引起追尋那位代筆人的動機，然後有 Violet 照片的剪報開始飄走，開啟了 TV 版故事後續的劇情。</p><p>就直接講講一些印象深刻的角色吧 </p><p>Benidict 在這次的劇場版比較少著墨，但在外傳劇場版中表現讓人感覺其實滿有魅力的，所以可以理解 Cattleya 為什麼會欣賞這個可愛男性了，當然在最後劇情時他和 Iris 等同事們也扮演著重要的角色。</p><p>而 Cattleya 除了有本來想要大聲斥責的魅力外，她的觀點也是滿有趣的: 讓 Violet 和 Dietfried 相互療傷。然後 Hodgins 的吐槽很有趣，還被後面的自己打臉。</p><p>如果 Fate HF 劇場版的其中一個賣點在於把姐姐氣質描述得令人動容，那哥哥氣質就是 Violet 劇場版的其一重要賣點了。</p><p>TV 版裡面的 Dietfried，看起來就是個當初教唆他弟弟把 Violet 當殺人工具使用，只會責怪 Violet 沒有保護好他弟弟的壞份子。但到了電影版，他「不坦率」的一面表現得愈來愈明顯，也更加從巧遇 Violet 代祭拜 Gilbert 母親的事件中看出他對老弟深切的思念。那段父子三人一起散步的回憶真的很重要，這也開啟了後續可以與劇場版 Violet 委託人故事可以相呼輝映的兄弟之情。</p><p>劇場版帶到最重要的委託事件就是 Yuris 的生前委託，他是重病末期患者，但也是拉不下臉當面向家人表達心意，甚至叫朋友不要過來探病的傲嬌小男孩。因此委託就是類似 Ann 母親那樣寫下最後一封給家人的信。然而等到要寫信給朋友的時候，身體已經撐不下去了，甚至到最後重病時也來不及把最後一封信寫完，只好使用剛開始流行的「電話」向他的摯友道別，這樣的方式，同時也讓我感受到一個書信時代結束的氛圍。</p><p>而「電話」開始逐漸取代書信這樣的劇情鋪陳，其實從外傳就開始一直刻意強調了，也就是 Benidict 常常送信到一位老阿嬤家，聽著她喃喃自語電波塔什麼時候蓋好的小橋段。到了本傳劇場版的結尾，電波塔終於蓋好了，科技持續進步，書信逐漸式微，時代的洪流持續推進，然而人與人之間真實的感情卻永遠也不會變。</p><p>套路的劇情，卻因為電影把 Yuris 性格表現地極為細膩，Violet 的幽默(我就爛)與同理表現地極為立體，讓人容易隨著裡面角色的情緒哭與笑，悲傷與喜悅。</p><h2 id="結局感想"><a href="#結局感想" class="headerlink" title="結局感想"></a>結局感想</h2><p>主線收尾雖然 Violet 哭得要死要活的，看到那段的時候卻完全不會想哭，會有種我們家的女兒終於長大，認識了一切的悲喜感情，有了為所愛事物勇敢表達心意的勇氣，而為此感到高興。Violet 寫給 Gilbert 那封信的最後一句話拿去翻譯，就是呼應電影大字幕安排的「真誠地愛著你，Violet Evergarden」。</p><p>我喜歡這樣浪漫而模糊的收尾，就是辭職之後直接去島上當人偶陪著 Gilbert，那種從此過著幸福快樂的生活，不用去想太多的感覺。看到島上郵局還綁著 Violet 髮上的紅絲帶，郵局別著人偶徽章的郵差比著我就爛(X)，也覺得很感動。Ann 的孫女也開始學著寫信給忙著工作沒能好好陪伴她，卻一直在乎著她愛著她的辛苦父母傳達感謝。溫馨的結尾，往往有著令人安心卻不失後勁的觀影後體驗。</p><p>如果對 2020 年有著無法釋懷的偏見，那紫羅蘭劇場版大概就是京阿尼帶給 2020 年的人們最好的禮物了。</p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/anime/">anime</category>
      
      <category domain="http://sean0921.github.io/tags/oil/">oil</category>
      
      
      <comments>http://sean0921.github.io/2020/10/09/violet-evergarden-movie/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Folding@Home 試用心得</title>
      <link>http://sean0921.github.io/2020/09/13/folding-at-home/</link>
      <guid>http://sean0921.github.io/2020/09/13/folding-at-home/</guid>
      <pubDate>Sun, 13 Sep 2020 04:33:19 GMT</pubDate>
      
      <description>&lt;p&gt;其實很久很久以前就好像聽過這東西了&lt;br&gt;只是 3 月的時候因為 COVID-19 所以又好像有媒體在宣傳這個專案&lt;/p&gt;
&lt;p&gt;於是那時在終於有自己的機器可以運用的前提下&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>其實很久很久以前就好像聽過這東西了<br>只是 3 月的時候因為 COVID-19 所以又好像有媒體在宣傳這個專案</p><p>於是那時在終於有自己的機器可以運用的前提下</p><a id="more"></a><p>(以前拿家裡公用的電腦挖這些，可能家人會有意見吧)</p><p>就去看官網看怎麼裝，能不能裝在 Linux 上，然後就拿<a href="https://foldingathome.org/alternative-downloads/">官方的 debian 包</a>來用用看</p><p>發現 <code>fahcontrol_7.5.1-1_all.deb</code> 竟然還相依 <a href="https://en.wikipedia.org/wiki/GNOME#GNOME_2">GNOME 2.x</a> 相關已經沒有人在維護的套件…. ( Python2 + Gtk2 的 <a href="https://en.wikipedia.org/wiki/PyGTK">PyGTK</a> 就算了?)</p><p>於是在那時還沒有時間搞的前提下怒用 <a href="https://www.docker.com/">Docker</a> 的 <a href="https://wiki.debian.org/DebianStretch">Debian Stretch (9.x)</a> 的映像來跑他的東西….</p><p>感覺這專案資助的單位還是滿有來頭的… 應該不至於沒經費繼續更新吧? 只是這部分的開發與維護剛好沒有被重視? 或是覺得不緊急不重要?</p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/sysadmin/">sysadmin</category>
      
      <category domain="http://sean0921.github.io/tags/foss/">foss</category>
      
      <category domain="http://sean0921.github.io/tags/covid19/">covid19</category>
      
      <category domain="http://sean0921.github.io/tags/distributed-computing/">distributed computing</category>
      
      <category domain="http://sean0921.github.io/tags/container/">container</category>
      
      
      <comments>http://sean0921.github.io/2020/09/13/folding-at-home/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Debian 最新版 nonfree 韌體安裝筆記</title>
      <link>http://sean0921.github.io/2020/09/12/debian-firmware-nonfree/</link>
      <guid>http://sean0921.github.io/2020/09/12/debian-firmware-nonfree/</guid>
      <pubDate>Sat, 12 Sep 2020 08:15:44 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;在使用 Debian GNU/Linux 這個發行版時，我們想要在兼顧 Debian Stable 穩定的特性下使用版本較新的套件，這時候 Backports 就是一個被官方社群支援的選項。然而有時我們還是會遇到裝了新版 backport kernel, non-free 韌體內容跟不上或找不到的小問題 (不影響系統運作)。除了 Bug Report 回報給相關社群之外，在等待的期間還可以做哪些處置來兼顧新版套件安裝與後續套件管理(apt)支援? 我們可以利用 Debian Salsa 的 GitLab 資源來協助我們參閱或修改測試中或已經釋出的打包腳本，讓 Debian 及其衍生發行版的套件資源變得更加健全。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>在使用 Debian GNU/Linux 這個發行版時，我們想要在兼顧 Debian Stable 穩定的特性下使用版本較新的套件，這時候 Backports 就是一個被官方社群支援的選項。然而有時我們還是會遇到裝了新版 backport kernel, non-free 韌體內容跟不上或找不到的小問題 (不影響系統運作)。除了 Bug Report 回報給相關社群之外，在等待的期間還可以做哪些處置來兼顧新版套件安裝與後續套件管理(apt)支援? 我們可以利用 Debian Salsa 的 GitLab 資源來協助我們參閱或修改測試中或已經釋出的打包腳本，讓 Debian 及其衍生發行版的套件資源變得更加健全。</p><a id="more"></a><h2 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h2><p>每次在 Debian Stable 想裝 <a href="https://backports.debian.org/">backports</a> 的 <a href="https://kernel.org/">kernel</a> (通常版本是次新釋出的穩定分支) 遇到了缺某些韌體的訊息</p><p>雖然看不出來系統會因此發生什麼問題，還是記一下更新的方式</p><p>首先要用 <code>apt</code> 先安裝 <code>linux-support-&lt;kernel version&gt;</code> 套件</p><p>以及: [^1]</p><ul><li><code>git</code> (要從 <a href="https://salsa.debian.org/">Debian Salsa</a> 抓 repo)</li><li><code>build-essential</code></li><li><code>fakeroot</code> </li><li><code>devscripts</code> (利用 debhelper 建標準 Debian 套件)</li></ul><p>然後</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://salsa.debian.org/kernel-team/firmware-nonfree.git \</span><br><span class="line">          /path/to/workdir/debian_firmware_nonfree/firmware-nonfree</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/workdir/debian_firmware_nonfree/firmware-nonfree  <span class="comment">#自己改路徑</span></span><br></pre></td></tr></table></figure><p>再 <code>git clone</code> <a href="https://kernel.org/">kernel.org</a> 維護的 <code>linux-firmware</code> 專案:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git \</span><br><span class="line">          /path/to/workdir/debian_firmware_nonfree/linux-firmware</span><br></pre></td></tr></table></figure><p>進去 <code>/path/to/workdir/debian_firmware_nonfree/firmware-nonfree</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PYTHONPATH=/usr/share/linux-support-&lt;kernel version&gt;/lib/python debian/rules \</span><br><span class="line">debian/control   <span class="comment">#自己改 kernel 版本</span></span><br></pre></td></tr></table></figure><p>或是改 <code>debian/rule.defs</code> 確認自己的 kernel 版號對不對後，<code>debian/rules debian/control</code><br>(通常不對，因為沒有 debian 後綴版號)</p><p>然後</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PYTHONPATH=/usr/share/linux-support-&lt;kernel version&gt;/lib/python \</span><br><span class="line">            debian/bin/release-update \</span><br><span class="line">            /path/to/workdir/debian_firmware_nonfree/linux-firmware</span><br></pre></td></tr></table></figure><p>然後忘記會不會幫你解包了</p><p>之後就把 <code>debian/</code> 目錄放到解好的地方 或是在有放 <code>debian/</code> 的目錄解包解過去</p><p>然後就照常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mk-build-deps debian/control  <span class="comment">## 通常東西都裝完了，不會裝新的東西</span></span><br><span class="line">debuild -b -us -uc  <span class="comment">## 就叫 debhelper 系列的工具幫你把套件生出來</span></span><br></pre></td></tr></table></figure><p>然後再往上層目錄找包好的套件</p><p>然後再選你要裝的 linux 韌體 sudo apt install ./&lt;套件名稱&gt;.deb</p><p>完工！ 重開機</p><p>通常應該不會出事…. 吧…</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>Debian Salsa 和 Debian backports 都是很好用的東西，嫌 Debian 太舊的人都該先試試這些東西並且嘗試 Bug Report 看 Maintainer 態度再來評論好壞。</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>說到這個想到有時在裝完 backport kernel 時且把 <code>quiet splash</code> 關掉之後</p><p>就會在 systemd 訊息看到 <code>networking.service</code> 跟 <a href="https://en.wikipedia.org/wiki/NetworkManager"><code>NetworkManager.service</code></a> 打架的訊息<br>(<code>networking.service</code> 本質上還是 <a href="https://en.wikipedia.org/wiki/Init">SysV init</a> 的東西只是 <a href="https://en.wikipedia.org/wiki/Systemd">systemd</a> 向下相容它)</p><p>這時都是選擇留 <code>NetworkManager</code> 砍 <code>networking</code> 相關的 script 套件</p><p>做完之後確定 <code>NetworkManager</code> 有在做事就搞定了</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p>[^1] <a href="https://wiki.debian.org/BuildingTutorial">https://wiki.debian.org/BuildingTutorial</a></p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/debian/">debian</category>
      
      <category domain="http://sean0921.github.io/tags/firmware/">firmware</category>
      
      <category domain="http://sean0921.github.io/tags/packaging/">packaging</category>
      
      <category domain="http://sean0921.github.io/tags/salsa/">salsa</category>
      
      <category domain="http://sean0921.github.io/tags/sysadmin/">sysadmin</category>
      
      
      <comments>http://sean0921.github.io/2020/09/12/debian-firmware-nonfree/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>口罩預購與健保卡讀卡機程式使用心得</title>
      <link>http://sean0921.github.io/2020/05/05/nhiicc-exp-note/</link>
      <guid>http://sean0921.github.io/2020/05/05/nhiicc-exp-note/</guid>
      <pubDate>Mon, 04 May 2020 16:00:00 GMT</pubDate>
      
      <description>&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;很久以前就有耳聞電腦健保卡/自然人憑證讀卡機的安裝元件有一些詭異的操作機制了，所以這次藉由預購口罩的機會實地體驗 &lt;img src=&quot;https://i.imgur.com/k5XQyYM.jpg&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ol start="0"><li>很久以前就有耳聞電腦健保卡/自然人憑證讀卡機的安裝元件有一些詭異的操作機制了，所以這次藉由預購口罩的機會實地體驗 <img src="https://i.imgur.com/k5XQyYM.jpg"></li></ol><a id="more"></a><ol><li><p>便利商店可以直接插卡<a href="https://www.nhi.gov.tw/Content_List.aspx?n=395F52D193F3B5C7">預購口罩</a>了，但之前已經買的 <strong>EZ100PU</strong> 的讀卡機了不用浪費，這也是使用動機之一</p></li><li><p>我目前使用的作業系統環境是 <a href="https://www.archlinux.org/">ArchLinux</a>，相關<a href="http://linux.vbird.org/linux_basic/0520rpm_and_srpm.php#intro">套件</a>也都更新到最新狀態了，有興趣去瞭解的人自己應該就可以查到這個時間點相關套件的版本是什麼了</p></li><li><p>在 <a href="https://zh.wikipedia.org/zh-tw/Linux">Linux</a> 核心的作業系統上，健保卡 + EZ100PU 讀卡機驅動安裝過程，雖然沒有點幾下滑鼠就能裝好那樣方便，但在 Arch Linux 上用第三方套件管理員(例: <a href="https://github.com/Jguer/yay"><code>yay</code></a>) 打幾行指令就能完成安裝，並利用 <a href="http://linux.vbird.org/linux_basic/0560daemons.php#daemon"><code>systemd</code></a> 這管理工具來啟動服務(類似去 Windows 工作管理員把服務開起來)，來取代 <a href="https://cloudicweb.nhi.gov.tw/cloudic/system/SMC/Document/%E5%81%A5%E4%BF%9D%E5%8D%A1%E5%85%83%E4%BB%B6_Linux(Ubuntu)%E5%AE%89%E8%A3%9D%E6%89%8B%E5%86%8A.pdf">官方安裝手冊</a> 裡的繁瑣且讓使用者難以在未來解除安裝的步驟，裝起來還是比預期的順手一些。</p></li><li><p>反而花比較多時間在設定瀏覽器憑證那邊，一開始只有按照 <a href="https://cloudicweb.nhi.gov.tw/cloudic/system/SMC/Document/%E5%81%A5%E4%BF%9D%E5%8D%A1%E5%85%83%E4%BB%B6_Linux(Ubuntu)%E5%AE%89%E8%A3%9D%E6%89%8B%E5%86%8A.pdf">官方安裝手冊</a> 建議，把 <code>https://localhost:7777</code> (或是 <code>https://127.0.0.1:7777</code>，<a href="https://zh.wikipedia.org/zh-tw/Localhost">一樣的東西</a> ) 加到例外，並把裝健保卡套件時，裡面附的 <a href="https://zh.wikipedia.org/zh-tw/%E6%A0%B9%E8%AF%81%E4%B9%A6">根憑證 (Root CA)</a> 安裝到瀏覽器 (我用 Firefox) 裡面。</p></li><li><p>進去官方給的測試頁面還是顯示讀不到覺得微挫折，而後憑著腦海中前人分享的心得去 <a href="https://zh.wikipedia.org/zh-tw/Hosts%E6%96%87%E4%BB%B6"><code>/etc/hosts</code></a> ( <a href="https://zh.wikipedia.org/zh-tw/Hosts%E6%96%87%E4%BB%B6">手動設定網域對應 ip 的檔案</a> ，Windows 也有 <code>C:\WINDOWS\system32\drivers\etc\hosts</code> 這個東西 ) 翻翻看內容，果然健保卡元件有加一行 <code>127.0.0.1       iccert.nhi.gov.tw</code> ，也就是說我在輸入 <code>https://iccert.nhi.gov.tw:7777</code>，我會藉此連線到「自己電腦」( <code>127.0.0.1</code> ) 的 port 7777 進行加密連線，但瀏覽器基於安全考量會希望憑證對應的「網域」及「ip 位置」必須都要一樣 ，因此驗證網頁要求連線過去的 <code>https://iccert.nhi.gov.tw:7777</code> 還是被瀏覽器當作不安全的連線而擋下來。  <img src="https://i.imgur.com/Z9l6UHG.png"></p></li><li><p>於是我再開瀏覽器去 <code>https://iccert.nhi.gov.tw:7777</code> 把警告消掉後加到安全例外，問題就解決了</p></li><li><p>安裝部分能給的建議就是廠商有心開發給 Linux 用的驅動值得鼓勵，但希望往後打包的部分也能花點心思整理，至少讓 <a href="https://zh.wikipedia.org/zh-tw/Ubuntu">Ubuntu</a> 的使用者可以用 <code>sudo apt install ./nhiicc-20200319-1.deb</code> 之類的方式一次安裝+設定的步驟也好 (其他 <a href="https://zh.wikipedia.org/zh-tw/Linux%E5%8F%91%E8%A1%8C%E7%89%88">發行版</a> 就看有沒有好心人士要順手包一下吧) ，節省更多使用者安裝與設定的時間。</p></li><li><p>憑證手動增加「安全例外」的感想是….手動設定開自己機器的 port 7777 的服務，還要特別跟自己說「這是安全的服務」，這樣真的沒問題嗎? 只能不負責任希望更好的解決方案吧，而且在 Windows 平臺上似乎也是這樣搞的呢。</p></li><li><p>繳費部分用到郵局金融卡，發現自己有些功能還沒開不能網路繳費，好笑的是郵局網路 ATM 的讀卡機程式只有 Windows/Mac，於是只好忍痛換回 Windows 設定完郵局金融卡，再回去原本作業系統完成剩下的繳費步驟了。因此對於健保卡有提供 Linux 讀卡機元件的部分，還是心存感激的。</p></li></ol>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/firmware/">firmware</category>
      
      <category domain="http://sean0921.github.io/tags/packaging/">packaging</category>
      
      <category domain="http://sean0921.github.io/tags/sysadmin/">sysadmin</category>
      
      <category domain="http://sean0921.github.io/tags/archlinux/">archlinux</category>
      
      
      <comments>http://sean0921.github.io/2020/05/05/nhiicc-exp-note/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
