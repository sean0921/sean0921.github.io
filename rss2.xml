<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sean&#39;s Blog</title>
    <link>http://sean0921.github.io/</link>
    
    <atom:link href="http://sean0921.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>New Blog site construted by Hexo (nodejs package)</description>
    <pubDate>Sun, 20 Jun 2021 23:52:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>PyGMT, 在 Python 製圖領域推廣 GMT 的利器? 我 ok, 你先用?</title>
      <link>http://sean0921.github.io/2021/06/21/pygmt-2021-6-feedback/</link>
      <guid>http://sean0921.github.io/2021/06/21/pygmt-2021-6-feedback/</guid>
      <pubDate>Sun, 20 Jun 2021 23:37:03 GMT</pubDate>
      
      <description>&lt;p&gt;Generic Mapping Tools，通用製圖工具，官方以及常見的簡稱為 GMT，是在地球科學領域廣泛使用的地理製圖工具之一。它可以在各種平臺結合 Shell Script (bash、csh)，Batch file(Windows) 的特性以及第三方工具(如: awk)，撰寫腳本以進行空間資訊的數據處理及高度客製化的地圖、圖表繪製。PyGMT 於 2020 年 5 月釋出，作為 GMT 在 Python 的 API。究竟這樣的專案對於 GMT 的使用族群而言有什麼可利用之處呢？以下分享個人的使用心得。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Generic Mapping Tools，通用製圖工具，官方以及常見的簡稱為 GMT，是在地球科學領域廣泛使用的地理製圖工具之一。它可以在各種平臺結合 Shell Script (bash、csh)，Batch file(Windows) 的特性以及第三方工具(如: awk)，撰寫腳本以進行空間資訊的數據處理及高度客製化的地圖、圖表繪製。PyGMT 於 2020 年 5 月釋出，作為 GMT 在 Python 的 API。究竟這樣的專案對於 GMT 的使用族群而言有什麼可利用之處呢？以下分享個人的使用心得。</p><span id="more"></span><h2 id="GMT-與-PyGMT-介紹"><a href="#GMT-與-PyGMT-介紹" class="headerlink" title="GMT 與 PyGMT 介紹"></a>GMT 與 PyGMT 介紹</h2><p>Generic Mapping Tools，通用製圖工具，官方以及常見的簡稱為 GMT。於 1988 年釋出第一個 1.0 版本，並且受<a href="http://www.nsf.gov/">美國國家科學基金會 (NSF)</a>的贊助持續開發至今，在 2021 年 6 月 5 日已經釋出 6.2.0 版本，是在地球科學領域廣泛使用的地理製圖工具之一。它可以在各種平臺結合 Shell Script (bash、csh)，Batch file(Windows) 的特性以及第三方工具(如: awk)，撰寫腳本以進行空間資訊的數據處理及高度客製化的地圖、圖表繪製。</p><p>GMT 團隊在 5.x 版釋出時，就已經積極投入應用程式介面(API)的開發，並陸續開發了 Fortran，MATLAB/Octave，Julia 等語言的 API。GMT 6.x 於 2019 年釋出後，於隔年 5 月便有了 GMT 在 Python 的 API，被命名為 PyGMT 專案。讓使用者能夠利用 Python 語法呼叫 PyGMT 提供的函式透過 GMT 的官方 API (而非透過 Shell 呼叫)進行製圖腳本的撰寫。究竟這樣的專案對於 GMT 的使用族群而言有什麼可利用之處呢？以下分享個人的使用心得。</p><h2 id="PyGMT-潛在優勢"><a href="#PyGMT-潛在優勢" class="headerlink" title="PyGMT 潛在優勢"></a>PyGMT 潛在優勢</h2><p>以下先分享使用 PyGMT 的好處：</p><ol><li>可以更輕鬆地結合在 Python 更為強大的套件(<code>pandas</code>，<code>numpy</code>，<code>obspy</code>)進行科學數據的運算與結果製圖</li><li>避開對系統 Shell 的直接呼叫，以提升以 GMT 為基礎建構應用程式的安全性。(相對於很多人偷懶直接使用 <code>system()</code> 直接呼叫 <code>gmt</code> 指令)</li><li>在 PyGMT 函數內的參數名稱，會設計成一般人較容易理解的長參數名稱，相較於 GMT 在 shell 指令的選項以短參數為主，可讀性大幅提升</li></ol><p>關於參數名稱的部分，這邊引用並微幅修改 <a href="https://gmt-tutorials.org/making_first_map.html">GMT 教學手冊</a> 的範例作為對照。</p><p>預計出來的原圖如下：<br><img src="https://gmt-tutorials.org/_images/making_first_map_gmt6_fig4.png"></p><p>若使用 GMT 5 的語法在 Shell 進行製圖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gmt pscoast \</span><br><span class="line">    -R19.42/22.95/59.71/60.56 \</span><br><span class="line">    -JM6i \</span><br><span class="line">    -W0.1p,black \</span><br><span class="line">    -Gdarkseagreen2 \</span><br><span class="line">    -Scornflowerblue \</span><br><span class="line">    -Df \</span><br><span class="line">    -P \</span><br><span class="line">    -Ba2f0.5g1 \</span><br><span class="line">    -BWSne+t<span class="string">&quot;Archipelago Sea&quot;</span> \</span><br><span class="line">    -A0.1 \</span><br><span class="line">    -U &gt; archi_sea.ps</span><br></pre></td></tr></table></figure><p>GMT 6 則是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gmt coast \</span><br><span class="line">    -R19.42/22.95/59.71/60.56 \</span><br><span class="line">    -JM6i \</span><br><span class="line">    -W0.1p,black \</span><br><span class="line">    -Gdarkseagreen2 \</span><br><span class="line">    -Scornflowerblue \</span><br><span class="line">    -Ba2f0.5g1 \</span><br><span class="line">    -BWSne+t<span class="string">&quot;Archipelago Sea&quot;</span> \</span><br><span class="line">    -A0.1 \</span><br><span class="line">    -U \</span><br><span class="line">    -png archi_sea</span><br></pre></td></tr></table></figure><p>而 PyGMT 則是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pygmt</span><br><span class="line">fig &#x3D; pygmt.Figure()</span><br><span class="line">fig.coast(</span><br><span class="line">        region&#x3D;[19.42, 22.95, 59.71, 60.56],</span><br><span class="line">        projection&#x3D;&quot;M6i&quot;,</span><br><span class="line">        shorelines&#x3D;[&#39;0.1p&#39;, &#39;black&#39;],</span><br><span class="line">        land&#x3D;&#39;darkseagreen2&#39;,</span><br><span class="line">        water&#x3D;&#39;cornflowerblue&#39;,</span><br><span class="line">        frame&#x3D;[&#39;a2f0.5g1&#39;, &#39;WSne+t&quot;Archipelago Sea&quot;&#39;],</span><br><span class="line">        area_thresh&#x3D;0.1,</span><br><span class="line">        timestamp&#x3D;True,</span><br><span class="line">)</span><br><span class="line">fig.show()</span><br><span class="line">fig.savefig(&#39;archi_sea_pygmt.png&#39;)</span><br></pre></td></tr></table></figure><p>在查看文件之前，哪個腳本較能夠讓人直覺去猜到各參數的意義，相信答案已經很明顯了吧。</p><h2 id="PyGMT-的疑慮與待改進之處"><a href="#PyGMT-的疑慮與待改進之處" class="headerlink" title="PyGMT 的疑慮與待改進之處"></a>PyGMT 的疑慮與待改進之處</h2><p>然而，相對於 GMT 的開發歷史，PyGMT 仍然是一個非常非常年輕的套件。縱使有了 NSF 的贊助，相對於其他類似規模的開源專案資源開發能量仍然十分有限。也因此我們可以輕易地找出許多理由，去建議剛接觸指令製圖的新手「先不要」輕易嘗試 PyGMT 這個套件。理由如下：</p><ol><li>PyGMT 支援的 GMT 模組數量仍然有限</li><li>即使某些 GMT 模組能被 PyGMT 支援，但能使用的長選項參數、能夠讀取的資料格式仍相對受限</li><li>開發/教學文件與範本數量仍極度缺乏，但此部分至少可以對照 GMT 指令版本的文件</li></ol><p>第 1,2 點的部分，以目前釋出的 0.3.1 版為例，該版本不支援、支援有限但常被使用的 GMT 指令模組包含了 <a href="https://docs.generic-mapping-tools.org/6.2/project.html"><code>project</code></a> (對平面直線附近包含深度資訊的座標點進行剖面繪製)，<a href="https://docs.generic-mapping-tools.org/6.2/supplements/seis/pssac.html"><code>pssac</code></a> (讀取 SAC 檔並繪製地震波形)， <a href="https://docs.generic-mapping-tools.org/6.2/histogram.html"><code>histogram</code></a> (繪製長條圖，目前已於 <a href="https://zh.wikipedia.org/zh-tw/Git">git</a> <code>master</code> 開發中版本開始支援)，<a href="https://docs.generic-mapping-tools.org/6.2/supplements/seis/meca.html"><code>meca</code></a> (舊稱 <code>psmeca</code>，已實作，但不支援震源機制球置放在震央以外的位置)…等。</p><p>即使 <code>pssac</code> 和 <code>histogram</code> 功能可分別用 <code>obspy</code> 和 <code>matplotlib</code> 替代，但使用介面上的差異，進而造成腳本轉換所要花費的時間，卻遠大於從 GMT 5,6 轉換到其他 PyGMT 支援的模組所要付出的。</p><p>另外在傳統 GMT 繪圖的過程中，我們需要 <code>-V</code> 選項來讓程式輸出更多明顯的提示訊息以利除錯校正，在 PyGMT 中開發者嘗試使用 <code>verbose=True</code> 使其參數更容易被理解，但大量使用此選項後便會發現許多函式仍然只能使用 <code>V=True</code> 來應付其 alias 無法實作的問題。</p><p>上面所遇到的問題會徒然花費使用者時間去想辦法應付這些問題，進而大幅降低使用者嘗試的意願。包含並不限於使用替代套件、透過 <code>pygmt.clib.Session.call_module()</code> 呼叫 API、回去使用 <code>subprocess</code>…等，其中必須用到 <code>subprocess()</code> 及其 pipe 功能來應付模組 <code>project</code> 不被 PyGMT 支援的問題時，已經開始思考當初使用這個套件的理由了。</p><h2 id="PyGMT-還有搞頭嗎"><a href="#PyGMT-還有搞頭嗎" class="headerlink" title="PyGMT 還有搞頭嗎?"></a>PyGMT 還有搞頭嗎?</h2><p>身為開源軟體的使用者、推廣者而言，仍然希望這個專案的開發能夠繼續下去。畢竟上面實際使用該套件後遇到的問題，多偏向開發、使用者社群尚未完整地建立起來的因素，再加上一般使用者多偏向從現有/舊有腳本去修改來繪製研究成果以節省時間，這也成為了推廣新工具(PyGMT，GMT 6 語法)、給予回饋的巨大阻礙。然而新需求、新方法總會不斷地出現，停留在舊版程式與腳本也遲早會遇到無法被新平臺、新工具支援的問題。如果我們持續停留在消耗別人既有成果而對於回饋開源專案這件事情不甚重視的話，未來能從它身上滿足的需求也將持續受限，無法跨出新的一步。</p><p>其他能做的事情，或許可以列舉：</p><ul><li>整理以上支援受限的 module 資訊，包含其必要性 (是否優於替代方案)，回報給開發者社群。</li><li>瞭解該專案 alias 實作方式，將能夠理解且需要修改的部分整理成新的 Pull Request (當然開發者搶先一步修好是更值得慶幸的)。</li><li>整理分享更多樣的繪圖腳本紀錄供社群參考，以利讓更多人在有意願嘗試時有個參考依據。</li></ul><p>對於那些前仆後繼在 GMT 相關專案投入大量心力改善軟體品質的前輩，個人也給予深深的尊敬與肯定，自己能做的除了以上那些，可能也只有幫忙打包新版的程式到自己習慣用的 Linux 發行版(Archlinux Arch Users Repository)，方便別人嘗鮮吧。</p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/opensource/">opensource</category>
      
      <category domain="http://sean0921.github.io/tags/freesoftware/">freesoftware</category>
      
      <category domain="http://sean0921.github.io/tags/geophysics/">geophysics</category>
      
      <category domain="http://sean0921.github.io/tags/science/">science</category>
      
      <category domain="http://sean0921.github.io/tags/mapping/">mapping</category>
      
      <category domain="http://sean0921.github.io/tags/python/">python</category>
      
      
      <comments>http://sean0921.github.io/2021/06/21/pygmt-2021-6-feedback/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>在 Debian/Ubuntu 等 Linux 發行版下簡易打包軟體 – 以 SAC 為例</title>
      <link>http://sean0921.github.io/2021/06/06/sac-debian-packaging/</link>
      <guid>http://sean0921.github.io/2021/06/06/sac-debian-packaging/</guid>
      <pubDate>Sat, 05 Jun 2021 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;我們常見到的Linux 發行版基本上就是一個「拼裝車」，組合各個不同來源的專案原始碼組合成一個有多用途的「通用作業系統」。我們將以地震學軟體 SAC 為例，說明如何簡單利用「套件打包」的機制，藉由既有軟體打包管理工具，使得發行版內的軟體更能有秩序地被管理。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>我們常見到的Linux 發行版基本上就是一個「拼裝車」，組合各個不同來源的專案原始碼組合成一個有多用途的「通用作業系統」。我們將以地震學軟體 SAC 為例，說明如何簡單利用「套件打包」的機制，藉由既有軟體打包管理工具，使得發行版內的軟體更能有秩序地被管理。</p><span id="more"></span><h2 id="套件打包的目的"><a href="#套件打包的目的" class="headerlink" title="套件打包的目的"></a>套件打包的目的</h2><p>相對於 Windows、FreeBSD 作業系統都有官方維護的基礎元件(base component)，我們常見到的 Linux 發行版基本上就是一個全然的「拼裝車」，組合各個不同來源的專案原始碼組合成一個有實際用途的「<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F#%E9%80%9A%E7%94%A8%E4%B8%8E%E4%B8%93%E7%94%A8%E3%80%81%E5%B5%8C%E5%85%A5%E5%BC%8F">通用作業系統</a>」。通常發行版的維護者會優先將符合<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E5%8F%8A%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6">自由及開放原始碼授權</a>的專案納入其關鍵元件，各個發行版看似五花八門，但終究離不開這個本質。少數發行版(如: Ubuntu Linux)在法律資源充足下會在安裝期間提供授權不相容(如: Nvidia 驅動、OpenZFS 核心模組)的元件以增進使用者體驗。但在大部分情況下，只要是授權有疑慮或明定不開放散佈原始碼的軟體，在發行版整合上就是一個巨大的阻礙，因為這意味者我們無法透過社群合作的機制，讓更熟悉軟體開發部署工程的人檢視我們平常使用的程式是否是易於使用、沒有潛在問題的。</p><p>而我們在 Unix-like (Linux、FreeBSD、Solaris、更早期的 SunOS..等) 環境下，最早期藉由原始碼安裝軟體方式，就是進入原始碼資料夾。執行 <code>make</code> 將軟體編譯完成後，再使用 root 權限 <code>make install</code>，將軟體安裝到預設的路徑 ( <code>/usr/local</code> ) 下。但現在我們已經極度不建議安裝用這樣的方式在預設路徑( <code>/usr/local</code> )，因為容易跟其他也手動安裝在同位置的套件混淆，使得嘗試解除安裝的過程中容易誤刪手動 <code>make install</code> 安裝其他套件的檔案，讓升級或解除安裝套件更加複雜。更別說在「不重複安裝」的前提下，解決 A 函式庫一更新，以它為基礎的 B 專案就得重新編譯才能找到 A 以執行的常見問題了。</p><p>因此我們開始使用了「套件打包」的機制，藉由單一專案的軟體打包管理程式(dpkg, rpm)，統一發行版內軟體管理的秩序。</p><h2 id="使用情境-–-為什麼要「打包」SAC"><a href="#使用情境-–-為什麼要「打包」SAC" class="headerlink" title="使用情境 – 為什麼要「打包」SAC?"></a>使用情境 – 為什麼要「打包」SAC?</h2><p>SAC 全名是 Seismic Analysis Code，是個歷史悠久的地震學資料處理軟體，由美國的 IRIS (地震學研究機構聯合會) 團隊開發，主要使用 C 語言開發，需在相容 Unix-like (如 Linux, FreeBSD, Cygwin…等) 的 X 視窗系統下才能正常使用，並只提供相關原始碼、執行檔給非特殊國家之地震學相關人員。若需取得相關程式需至官方網站<a href="https://ds.iris.edu/ds/nodes/dmc/forms/sac/">填寫申請表單</a>，由該單位人員審核後才可藉由 email 附件取得檔案。</p><p>傳統而言，在同一作業系統環境下安裝 SAC 有兩種途徑，第一種是直接把 IRIS 提供的執行檔手動放到指定位置 ( Linux 下指定 <code>/usr/local</code> ) 後執行，第二種是在作業系統下自行使用 gcc 等編譯器建置後安裝到自行指定的位置 (若未指定則仍安裝到 <code>/usr/local</code> )</p><p>第一種方法的方便之處在於說，不需要瞭解太多 Linux / Unix 的基礎知識與相關操作就可以藉由非常基本的指令 (cp, sudo…等) 完成安裝</p><p>缺點在於只能安裝在 <a href="https://zh.wikipedia.org/zh-tw/X86">x86</a>/<a href="https://zh.wikipedia.org/zh-tw/X86-64">x86_64</a> 平臺下的 CPU 才能順利執行的 Linux 執行檔，也就是說若你今天想在同樣安裝 Linux 的小型開發板 (如：樹梅派、Apple Silicon M1 上執行的虛擬機器)或是在官方沒考慮的 Unix-like 環境(Cygwin, FreeBSD, Termux)下執行是做不到的 (樹梅派或許可以在上面開 QEMU 模擬，但速度可預想是非常非常慢的)</p><p>另外第一種方法也無法自行客製化相關功能，這限制的問題在於說用此方法安裝的 SAC 程式只能在極度有限的操作體驗下進行，而使得剛熟悉 bash 等指令介面的使用者進入 SAC 的指令介面會發現 TAB 自動補完、上下、結束時保留指令歷史、Ctrl+R 搜尋歷史等在 bash 有的功能這邊都沒有或限制更多。但如果客製化編譯就可以藉由增加相關選項就可以改善。</p><p>因此我們知道如果藉由第二種方法有可修改安裝路徑、自行增減相關功能、移植更方便等優勢，但此方法對於沒有接觸過系統管理、程式開發的使用者挑戰並不小，且若想要提供給多個各自符合資格的人員，安裝一樣客製化設定同時符合易於安裝、升級、解除安裝原則的 SAC 程式也勢必會花費很多心力。此時發行版下的套件管理工具就是我們很重要的夥伴了! 在這邊我們將用 Debian/Ubuntu 下的 <code>apt</code> (<code>dpkg</code>) 工具來協助我們更輕易地部署「我們的 SAC」</p><h2 id="SAC-Debian-Ubuntu-Packager-介紹"><a href="#SAC-Debian-Ubuntu-Packager-介紹" class="headerlink" title="SAC Debian/Ubuntu Packager 介紹"></a>SAC Debian/Ubuntu Packager 介紹</h2><p><img src="https://github.com/sean0921/sean0921.github.io/raw/3ef1e32d61fc62c546c6ba31ef526ccc050cc7b2/images/demo.gif"></p><p>這個工具使用最基本的 Shell Script 腳本，搭配 <code>dpkg</code> 程式，將編譯後的 SAC 程式放置在特定資料夾後，再加入軟體資訊後打包壓縮成單一安裝檔 (<code>&lt;pkg_name&gt;.deb</code>)，最後再由使用者從 <code>apt</code> 程式安裝該套件，納入發行版套件管理系統的記錄中。</p><p>由以上討論我們可以歸納這個方法的好處：</p><ol><li>使得 SAC 更易於安裝、解除安裝、升級</li><li>SAC 底層用到的函式庫一旦有重大升級，發行版套件管理程式（<code>apt</code>）會跳出相關警告，讓你記得要重新安裝程式。</li><li>減少繁瑣的環境變數設定</li></ol><p>使用這個工具安裝 SAC 之前，符合相關資格的使用者仍需自行至 IRIS 網站申請下載原始碼，以遵守授權相關規範。詳細安裝方式請參考 <a href="https://github.com/sean0921/sac_debian_packager">GitHub</a> 上的 README 頁面。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>套件打包適合用在一定數量的人會安裝的軟體上，以減少繁瑣安裝過程中可能會出錯的機率，以增進效率並兼顧使用體驗。也是讓 Linux 在有限硬碟空間下提供完整功能的關鍵。若有心在未來的專案上利用 Linux 環境作為開發測試平臺，這仍然是不可或缺的知識。</p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/linux/">linux</category>
      
      <category domain="http://sean0921.github.io/tags/packaging/">packaging</category>
      
      <category domain="http://sean0921.github.io/tags/sysadmin/">sysadmin</category>
      
      <category domain="http://sean0921.github.io/tags/seismology/">seismology</category>
      
      
      <comments>http://sean0921.github.io/2021/06/06/sac-debian-packaging/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>成為 Git 獨行玩家的第一步 － 自架 cgit 網頁程式碼瀏覽服務</title>
      <link>http://sean0921.github.io/2021/03/27/be-a-git-single-player-cgit-tutorial/</link>
      <guid>http://sean0921.github.io/2021/03/27/be-a-git-single-player-cgit-tutorial/</guid>
      <pubDate>Fri, 26 Mar 2021 17:47:27 GMT</pubDate>
      
      <description>&lt;p&gt;不想被單一特定程式碼平臺綁住你個人開發的程式碼又想將你的心血整合起來供其他人參考嗎? 又或是擔心在 GitHub 上一堆為了學術研究用途的專案哪一天被和諧掉嗎? 如果沒有多人合作 CI/CD 需求直接從網頁登入存取的需求 &lt;code&gt;cgit&lt;/code&gt; 這個由 C 語言開發的網頁 cgi 服務, 簡潔又快速的功能或許可以輕易滿足你的需求喔&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>不想被單一特定程式碼平臺綁住你個人開發的程式碼又想將你的心血整合起來供其他人參考嗎? 又或是擔心在 GitHub 上一堆為了學術研究用途的專案哪一天被和諧掉嗎? 如果沒有多人合作 CI/CD 需求直接從網頁登入存取的需求 <code>cgit</code> 這個由 C 語言開發的網頁 cgi 服務, 簡潔又快速的功能或許可以輕易滿足你的需求喔</p><span id="more"></span><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="1-環境配置"><a href="#1-環境配置" class="headerlink" title="1. 環境配置"></a>1. 環境配置</h3><h4 id="運行環境"><a href="#運行環境" class="headerlink" title="運行環境"></a>運行環境</h4><p>任何 Unix-like 環境 ( Linux/FreeBSD/Cygwin/WSL ) 皆可, 本文章以 <em>Debian GNU/Linux Buster(10)</em> 為例進行解說, 相關過程指令也相容 <em>Ubuntu Linux</em>, <em>Debian GNU/Linux Bullseye(11)</em></p><h4 id="安裝相關套件"><a href="#安裝相關套件" class="headerlink" title="安裝相關套件"></a>安裝相關套件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install cgit fcgiwrap nginx git python3-markdown</span><br></pre></td></tr></table></figure><h3 id="2-調校-nginx-cgit"><a href="#2-調校-nginx-cgit" class="headerlink" title="2. 調校 nginx, cgit"></a>2. 調校 nginx, cgit</h3><ul><li>刪除 <code>/etc/nginx/sites-&#123;enabled,available&#125;/default</code>, 用以下設定檔取代</li><li><code>/etc/nginx/conf.d/cgit.conf</code>:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        root &#x2F;var&#x2F;www&#x2F;html;</span><br><span class="line"></span><br><span class="line">        # Add index.php to the list if you are using PHP</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                #try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">                try_files $uri @cgit;    ## 這邊要使用 cgit 的 CGI 程式來解譯路徑</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location &#x2F;cgit-css&#x2F; &#123;</span><br><span class="line">                rewrite ^&#x2F;cgit-css(&#x2F;.*)$ $1 break;</span><br><span class="line">                root &#x2F;usr&#x2F;share&#x2F;cgit;    ## cgit 的 CSS 排版格式與相關預設圖片需要它</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location @cgit &#123;</span><br><span class="line">                include             fastcgi_params;</span><br><span class="line"></span><br><span class="line">                # Path to the CGI script that comes with cgit</span><br><span class="line">                fastcgi_param       SCRIPT_FILENAME &#x2F;usr&#x2F;lib&#x2F;cgit&#x2F;cgit.cgi;</span><br><span class="line"></span><br><span class="line">                fastcgi_param       PATH_INFO       $uri;</span><br><span class="line">                fastcgi_param       QUERY_STRING    $args;</span><br><span class="line">                fastcgi_param       HTTP_HOST       $server_name;</span><br><span class="line"></span><br><span class="line">                # Path to the socket file that is created&#x2F;used by fcgiwrap</span><br><span class="line">                fastcgi_pass        unix:&#x2F;run&#x2F;fcgiwrap.socket;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>/etc/cgitrc</code>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># cgit config</span><br><span class="line"># see cgitrc(5) for details</span><br><span class="line"></span><br><span class="line">## 這邊要搭配 nginx 設定的路徑來設定相關資源位置</span><br><span class="line">css&#x3D;&#x2F;cgit-css&#x2F;cgit.css</span><br><span class="line">logo&#x3D;&#x2F;cgit-css&#x2F;cgit.png</span><br><span class="line">favicon&#x3D;&#x2F;cgit-css&#x2F;favicon.ico</span><br><span class="line"></span><br><span class="line"># if you don&#39;t want that webcrawler (like google) index your site</span><br><span class="line">#robots&#x3D;noindex, nofollow</span><br><span class="line"></span><br><span class="line">root-title&#x3D;Andas valiendo verga</span><br><span class="line">root-desc&#x3D;r2&#39;s Git Repositories</span><br><span class="line"># if cgit messes up links, use a virtual-root. For example has cgit.example.org&#x2F; this value:</span><br><span class="line">virtual-root&#x3D;&#x2F;</span><br><span class="line">#virtual-root&#x3D;&#x2F;cgit.cgi&#x2F;</span><br><span class="line">enable-http-clone&#x3D;1</span><br><span class="line">cache-scanrc-ttl&#x3D;1</span><br><span class="line">#remove-suffix&#x3D;1</span><br><span class="line">#branch-sort&#x3D;age</span><br><span class="line">local-time&#x3D;1</span><br><span class="line">enable-blame&#x3D;1</span><br><span class="line">enable-commit-graph&#x3D;1</span><br><span class="line">enable-index-owner&#x3D;1</span><br><span class="line">enable-log-filecount&#x3D;1</span><br><span class="line">enable-log-linecount&#x3D;1</span><br><span class="line">max-stats&#x3D;year</span><br><span class="line">max-commit-count&#x3D;250</span><br><span class="line">max-repo-count&#x3D;250</span><br><span class="line">snapshots&#x3D;tar.gz tar.zst</span><br><span class="line"></span><br><span class="line"># Specify some default clone urls using macro expansion</span><br><span class="line">#clone-url&#x3D;http:&#x2F;&#x2F;myip&#x2F;$CGIT_REPO_URL</span><br><span class="line"></span><br><span class="line"># Highlight source code with python pygments-based highligher</span><br><span class="line">source-filter&#x3D;&#x2F;usr&#x2F;lib&#x2F;cgit&#x2F;filters&#x2F;syntax-highlighting.py</span><br><span class="line"></span><br><span class="line"># Format markdown, restructuredtext, manpages, text files, and html files</span><br><span class="line"># through the right converters</span><br><span class="line">about-filter&#x3D;&#x2F;usr&#x2F;lib&#x2F;cgit&#x2F;filters&#x2F;about-formatting.sh</span><br><span class="line"></span><br><span class="line">enable-index-links&#x3D;1</span><br><span class="line">root-readme&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;readme.md</span><br><span class="line">#root-readme&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;readme.html</span><br><span class="line"></span><br><span class="line">## 這邊可以幫你設定 cgit 掃描的 repo 所在資料夾</span><br><span class="line">scan-path&#x3D;&#x2F;srv&#x2F;gitrepos&#x2F;git&#x2F;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line">## List of common mimetypes</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">mimetype.gif&#x3D;image&#x2F;gif</span><br><span class="line">mimetype.html&#x3D;text&#x2F;html</span><br><span class="line">mimetype.jpg&#x3D;image&#x2F;jpeg</span><br><span class="line">mimetype.jpeg&#x3D;image&#x2F;jpeg</span><br><span class="line">mimetype.pdf&#x3D;application&#x2F;pdf</span><br><span class="line">mimetype.png&#x3D;image&#x2F;png</span><br><span class="line">mimetype.svg&#x3D;image&#x2F;svg+xml</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line">## Search for these files in the root of the default branch of repositories</span><br><span class="line">## for coming up with the about page:</span><br><span class="line">## 這邊如果沒安裝 python3-markdown 等套件的話README 仍然無法顯示 markdown 格式的喔</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">readme&#x3D;:README.md</span><br><span class="line">readme&#x3D;:readme.md</span><br><span class="line">readme&#x3D;:README.mkd</span><br><span class="line">readme&#x3D;:readme.mkd</span><br><span class="line">readme&#x3D;:README.rst</span><br><span class="line">readme&#x3D;:readme.rst</span><br><span class="line">readme&#x3D;:README.html</span><br><span class="line">readme&#x3D;:readme.html</span><br><span class="line">readme&#x3D;:README.htm</span><br><span class="line">readme&#x3D;:readme.htm</span><br><span class="line">readme&#x3D;:README.txt</span><br><span class="line">readme&#x3D;:readme.txt</span><br><span class="line">readme&#x3D;:README</span><br><span class="line">readme&#x3D;:readme</span><br><span class="line">readme&#x3D;:INSTALL.md</span><br><span class="line">readme&#x3D;:install.md</span><br><span class="line">readme&#x3D;:INSTALL.mkd</span><br><span class="line">readme&#x3D;:install.mkd</span><br><span class="line">readme&#x3D;:INSTALL.rst</span><br><span class="line">readme&#x3D;:install.rst</span><br><span class="line">readme&#x3D;:INSTALL.html</span><br><span class="line">readme&#x3D;:install.html</span><br><span class="line">readme&#x3D;:INSTALL.htm</span><br><span class="line">readme&#x3D;:install.htm</span><br><span class="line">readme&#x3D;:INSTALL.txt</span><br><span class="line">readme&#x3D;:install.txt</span><br><span class="line">readme&#x3D;:INSTALL</span><br><span class="line">readme&#x3D;:install</span><br><span class="line"></span><br><span class="line">###Catogory</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;</span><br><span class="line">## 這邊可以另外幫自己分類 git 專案</span><br><span class="line">#</span><br><span class="line">#section&#x3D;a: BBS Projects</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;category&#x2F;bbs</span><br><span class="line">#section&#x3D;b: My Distro-Hacking Records</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;category&#x2F;distro</span><br><span class="line">#section&#x3D;c: My Personal Toys</span><br><span class="line">#scan-path&#x3D;&#x2F;my&#x2F;gitrepos&#x2F;git&#x2F;category&#x2F;mytoy</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-啟用服務與啟動服務"><a href="#3-啟用服務與啟動服務" class="headerlink" title="3. 啟用服務與啟動服務"></a>3. 啟用服務與啟動服務</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t <span class="comment">## 檢查 nginx config 檔格式是否正確</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> --now fcgiwrap</span><br></pre></td></tr></table></figure><h3 id="4-1-抓取你想要鏡像的-git-repository"><a href="#4-1-抓取你想要鏡像的-git-repository" class="headerlink" title="4-1. 抓取你想要鏡像的 git repository"></a>4-1. 抓取你想要鏡像的 git repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --mirror https://github.com/&lt;github_user_name&gt;/&lt;github_repo_name&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-透過-git-ssh-server-設定你想要託管的-git-repository-optional"><a href="#4-2-透過-git-ssh-server-設定你想要託管的-git-repository-optional" class="headerlink" title="4-2. 透過 git+ssh server 設定你想要託管的 git repository (optional)"></a>4-2. 透過 git+ssh server 設定你想要託管的 git repository (optional)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/git-shell git</span><br><span class="line">sudo -su git cat &lt;place_of_your_ssh_public_key&gt; &gt;&gt; &lt;git_account_home&gt;/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="5-噹噹-開始使用你的服務"><a href="#5-噹噹-開始使用你的服務" class="headerlink" title="5. 噹噹! 開始使用你的服務"></a>5. 噹噹! 開始使用你的服務</h3><p>輸入網址, 享用你的自架 git 服務: <code>http://&lt;your_cgit_ip_or_domain&gt;</code></p><p>若服務對外公開的話, 建議還是設定一下 TLS 安全連線比較保險一些</p><p>詳細 TLS 憑證設定與 Let’s Encrypt 憑證申請, 可以參考以下資源進行調整:</p><ul><li><a href="https://wiki.gslin.org/wiki/Let%27s_Encrypt">https://wiki.gslin.org/wiki/Let%27s_Encrypt</a></li><li><a href="https://ssl-config.mozilla.org/">https://ssl-config.mozilla.org/</a></li></ul><hr><p>我的 git repository: <a href="https://cgit.clam.ml/">https://cgit.clam.ml</a></p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/git/">git</category>
      
      <category domain="http://sean0921.github.io/tags/cgit/">cgit</category>
      
      <category domain="http://sean0921.github.io/tags/nginx/">nginx</category>
      
      <category domain="http://sean0921.github.io/tags/fastcgi/">fastcgi</category>
      
      <category domain="http://sean0921.github.io/tags/opensource/">opensource</category>
      
      
      <comments>http://sean0921.github.io/2021/03/27/be-a-git-single-player-cgit-tutorial/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>從唯美浪漫到勵志成長 - 喬瑟與虎與魚群</title>
      <link>http://sean0921.github.io/2021/01/22/josee-tiger-fish/</link>
      <guid>http://sean0921.github.io/2021/01/22/josee-tiger-fish/</guid>
      <pubDate>Fri, 22 Jan 2021 09:13:42 GMT</pubDate>
      
      <description>&lt;p&gt;喬瑟與虎與魚群（ジョゼと虎と魚たち）是日本作家田邊聖子首次於 1984 年開始連載的短篇小說作品，於 2003 年、2020 年分別翻拍成日版與韓版真人電影，並於 2020/12/25 上映動畫電影 (臺灣於 2021/1/20 上映)&lt;/p&gt;
&lt;p&gt;原作篇幅較短，一些故事細節交代較為曖昧而著重於描繪角色的心境，因此改編作品的詮釋風格與走向也大相逕庭。這篇會討論到的主要是原作小說與動畫電影的相關&lt;em&gt;劇情內容&lt;/em&gt;與雜感，當然真人電影版詮釋方式可能有它的美感與哲理，但目前沒什麼動力去欣賞。&lt;/p&gt;
&lt;p&gt;原作小說與動畫電影版比較起來已然成為兩個故事，然而各自都是透過表現出自己獨有風格去觸動人心的作品&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>喬瑟與虎與魚群（ジョゼと虎と魚たち）是日本作家田邊聖子首次於 1984 年開始連載的短篇小說作品，於 2003 年、2020 年分別翻拍成日版與韓版真人電影，並於 2020/12/25 上映動畫電影 (臺灣於 2021/1/20 上映)</p><p>原作篇幅較短，一些故事細節交代較為曖昧而著重於描繪角色的心境，因此改編作品的詮釋風格與走向也大相逕庭。這篇會討論到的主要是原作小說與動畫電影的相關<em>劇情內容</em>與雜感，當然真人電影版詮釋方式可能有它的美感與哲理，但目前沒什麼動力去欣賞。</p><p>原作小說與動畫電影版比較起來已然成為兩個故事，然而各自都是透過表現出自己獨有風格去觸動人心的作品</p><span id="more"></span><p><img src="https://i.imgur.com/fiEnXn9.png" alt="蒼のワルツ MV 封面"></p><p>先談談小說版</p><p>在看完 Eve 的<a href="https://www.youtube.com/watch?v=pyDCubgU57g">蒼のワルツ</a> MV 之後，開始對原作感到好奇，一時衝動把電子書買下，就不小心把原著看完了（一開始是在 kobo 買的，後來發現 bookwalker 有特價但已經來不及了www）</p><p>一開始打開書發現原來是短篇小說集本來有點小失望，但想想故事太長我也沒毅力看完，加上每篇故事都在極短的篇幅，曖昧的劇情走向下，留下立體且使人深有共感的角色心境描寫，也使得自己的心境彷彿也能透過這幾篇故事主角的自述中感受到不同社會角色眼前所見到、心裏所感受到的感情世界。對自己來說算是滿新鮮的體驗。</p><p>其他值得注意的是除了「喬瑟」篇是在描寫純愛故事外，同本書的其他故事大多從已出社會能獨立自主維持生計的女性為第一人稱出來去觀察他們眼中看到的各種男人，很多故事幾乎要衝撞到傳統道德價值觀的邊緣，但多在最後留下曖昧的結尾讓讀者自行想像，而將敘述重點留在透過描繪周遭事物的變化表現出主角心境與其轉變。</p><p>而「喬瑟」篇故事架構相對其他短篇完整一些，喬瑟(Josee) 指的是女主角山村久美子在佛蘭西絲·莎崗(Françoise Sagan)的書中常看到的主角名，<br>後來拿這個名字作為自稱。故事一開始直接從「蜜月旅行」開始以倒敘法描述喬瑟與恆夫相遇的故事，相較於動畫版的「完人人設」與聽說 2003 年劇場版的「腳踏多條船人設」，小說則是將恆夫描述成有自己正常休閒、畢業後庸庸碌碌找工作在職場求生存，也談過幾段感情，但從喬瑟身上開始體會到感情真諦的平凡男人。</p><p>小說的部分也從許多細節隱喻到雖然悲情但是真實的社會陰暗面，但主角重新相遇後也用更有張力的方式表達他們對彼此的思戀與愛慕，故事最後的走向也類似紫羅蘭劇場版最後的風格吧，算是一個從此過著平淡卻幸福快樂日子的結局。</p><p><img src="https://cdn.kingstone.com.tw/book/images/product/20186/2018611724930/2018611724930-01.jpg" alt="圖片來源: 金石堂網路書城"></p><p>而動畫版算是幾乎重寫整個故事，女主的家庭背景有消一下毒，男主角的人設也改很多，另外在不少細節、臺詞呼應到小說版對應的情節。</p><p>配樂部分 Evan Call 這次相對於紫羅蘭永恆花園劇場版就顯得比較沒有存在感了，看似這樣卻成功在無形中塑造了一種正向活潑的氣息，來推動劇情，這方面倒是有盡到他們的本分XD</p><p>臺詞方面個人印象最深刻的是「跟想像的不一樣」還有「我們都死了呢」這兩句，前者的不同建議再親自看過各自的版本才能有比較深刻的體會，後者出現的時機則是在原作的蜜月旅行當晚，對應到的動畫劇場版的最後在櫻花樹下突然相遇。這些對應其實就能看出動畫組花了多少心思，讓觀眾們從更容易從生活事物體會的角度，瞭解喬瑟那樣的心境與幸福感。其他更多類似彩蛋的小細節對應也滿有趣的，像是小說版提到的「溜冰鞋」，在動畫版中也用更活潑的方式重現了(包括喬瑟不小心滑下去那段)，當然其他恆夫作為木工生產出來的心血，也很自然地融入日常部分的背景。</p><p>動畫版劇情編排部分不知道是因為篇幅限制還是其它原因，加戲的部分真要糾結還是可以看到不少讓人滿出戲的劇情轉折。然而仍有值得讚許的地方，從認識圖書館員、喬瑟第一次講繪本故事大失敗，鋪陳到最後喬瑟唸自己製作的繪本故事給小孩子聽，進而讓故事內容激勵到在一旁聽的恆夫，這段劇情應該就是全戲的最大亮點，光是那段到最後的浪漫 Ending 就可以忘掉動畫版所有的大小瑕疵，也成功表現出這個改編作品想傳達出的核心精神。</p><p>其他值得去關注的，還有喬瑟在進去恆夫打工的水族店沒多久就想離開的那橋段。有人認為她是在吃舞的醋，但從畫面刻意帶到其他人各自聊天聊得很愉快的場景來看，我認為解讀成喬瑟一時間沒辦法適應那樣過度充滿活力的環境，覺得能量被耗盡想逃離，是更為合理的。</p><p><img src="https://pbs.twimg.com/media/Ep6iUqDVgAEY_zD.jpg" alt="動畫劇場版原聲帶封面"></p><p>有別於以往真人劇場版(聽說)更注重於探討愛情本質與人心轉折，這次動畫劇場版以小說版就已經很優秀的人設與劇情架構為基礎，結合近年大家更能接受的故事元素，在愛情故事的基礎下，增加朋友之間的相互勉勵、少年成長與生涯規劃，還加了男主有懼高症的可愛人設(?)。在推動劇情重要地位的圖書館員、給予恆夫氧氣的摯友…等重要配角的幫忙下，讓他們的感情從兩人世界的取暖，拓展到相互扶持，且也能夠被週遭美麗世界所祝福的浪漫故事。這讓已經看完原作心裡就掀起波瀾的自己看完動畫後餘韻更為深刻吧。</p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/anime/">anime</category>
      
      <category domain="http://sean0921.github.io/tags/novel/">novel</category>
      
      <category domain="http://sean0921.github.io/tags/romance/">romance</category>
      
      <category domain="http://sean0921.github.io/tags/josee/">josee</category>
      
      
      <comments>http://sean0921.github.io/2021/01/22/josee-tiger-fish/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>靈魂急轉彎(Soul)觀後簡短感</title>
      <link>http://sean0921.github.io/2021/01/03/2020-pixel-soul-movie/</link>
      <guid>http://sean0921.github.io/2021/01/03/2020-pixel-soul-movie/</guid>
      <pubDate>Sat, 02 Jan 2021 17:41:04 GMT</pubDate>
      
      <description>&lt;p&gt;先講結論，22 我婆 (如果如字幕的她沒打錯的話????&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/qpD4kAQ.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;以下可能劇透&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>先講結論，22 我婆 (如果如字幕的她沒打錯的話????<br><img src="https://i.imgur.com/qpD4kAQ.png"></p><p>以下可能劇透</p><span id="more"></span><p>這部作品有幾個對我頻率的地方</p><p>首先是以藍調音樂為傳遞主角思維與人生理想的媒介</p><p>在這樣題材的表現上</p><p>Pixel 在基於思慮多元種族議題(BLM?)方面上拿到的 Political Correct 的分數以外</p><p>也兼顧了藝術性的傳達，讓<a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E8%AA%BF">藍調</a>曲風與<a href="https://zh.wikipedia.org/wiki/%E7%88%B5%E5%A3%AB%E4%B9%90">爵士樂</a>的優美與哀愁透過更為普及的媒介傳達出來</p><p>這是讓以前半夜在收音機隨興聽相關節目的我相當感動的地方</p><p>也可以巧妙地搭配靈魂出竅的橋段讓劇情更為順暢</p><p>再來是 22 號對於生活之美的體悟</p><p>從 22 號犀利卻中肯的言辭，不難看出他是跟隨過許多名人並理解過其思想仍玩世不恭的人</p><p>吸收到許多知識與哲學涵養的靈魂但怎樣都拿不到投胎轉世的通行證</p><p>但進了主角身體</p><p>在那些主角以為平凡無奇，甚至單調到令人絕望的日常</p><p>卻因為 22 這個亂源的自作主張，擦出了不一樣的「火花」，</p><p>22 對每一件讓他驚喜的小物收藏，披薩、桃花心木種子…等，也成為了啟發主角與我們的契機</p><blockquote><p>找回美的感覺其實很簡單，去觸摸一片葉子，去聞一下在很熱很熱的夏天、下完午後暴雨的氣味，那是都我們有記憶的感覺，那都會引發我們的感觸和感動。</p></blockquote><p>就如同蔣勳提過的</p><p>22 也用了這樣的概念不經意地找回主角遺忘生活各個角落的感動，然而當時主角並沒有察覺</p><p>甚至責怪 22 只是利用別人的身體作為自己拿到通行證的捷徑，因此 22 的陰暗面就再也承受不住了</p><p>其實最讓人揪心也是最讓人「享受」的部分也是 22 暴衝，以及以為主角沒救但是至少能夠不抱遺憾離開的那個橋段吧</p><p>但除了劇情希望更能為大眾所接受的考量，或許也是不希望整部作品想要傳達的概念失焦吧。</p>]]></content:encoded>
      
      
      
      <category domain="http://sean0921.github.io/tags/anime/">anime</category>
      
      <category domain="http://sean0921.github.io/tags/disney/">disney</category>
      
      
      <comments>http://sean0921.github.io/2021/01/03/2020-pixel-soul-movie/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
